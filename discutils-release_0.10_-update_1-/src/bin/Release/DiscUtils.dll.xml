<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiscUtils</name>
    </assembly>
    <members>
        <member name="T:DiscUtils.BlockCacheSettings">
            <summary>
            Settings controlling BlockCache instances.
            </summary>
        </member>
        <member name="M:DiscUtils.BlockCacheSettings.#ctor">
            <summary>
            Initializes a new instance of the BlockCacheSettings class.
            </summary>
        </member>
        <member name="M:DiscUtils.BlockCacheSettings.#ctor(DiscUtils.BlockCacheSettings)">
            <summary>
            Initializes a new instance of the BlockCacheSettings class.
            </summary>
            <param name="settings">The cache settings</param>
        </member>
        <member name="P:DiscUtils.BlockCacheSettings.BlockSize">
            <summary>
            Gets or sets the size (in bytes) of each cached block.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheSettings.ReadCacheSize">
            <summary>
            Gets or sets the size (in bytes) of the read cache.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheSettings.LargeReadSize">
            <summary>
            Gets or sets the maximum read size that will be cached.
            </summary>
            <remarks>Large reads are not cached, on the assumption they will not
            be repeated.  This setting controls what is considered 'large'.
            Any read that is more than this many bytes will not be cached.</remarks>
        </member>
        <member name="P:DiscUtils.BlockCacheSettings.OptimumReadSize">
            <summary>
            Gets or sets the optimum size of a read to the wrapped stream.
            </summary>
            <remarks>This value must be a multiple of BlockSize</remarks>
        </member>
        <member name="T:DiscUtils.BlockCacheStatistics">
            <summary>
            Statistical information about the effectiveness of a BlockCache instance.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.LargeReadsIn">
            <summary>
            Gets the number of requested 'large' reads, as defined by the LargeReadSize setting.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.UnalignedReadsIn">
            <summary>
            Gets the number of requested unaligned reads.
            </summary>
            <remarks>Unaligned reads are reads where the read doesn't start on a multiple of
            the block size.</remarks>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.TotalReadsIn">
            <summary>
            Gets the total number of requested reads.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.TotalReadsOut">
            <summary>
            Gets the total number of reads passed on by the cache.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.ReadCacheHits">
            <summary>
            Gets the number of times a read request was serviced (in part or whole) from the cache.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.ReadCacheMisses">
            <summary>
            Gets the number of time a read request was serviced (in part or whole) from the wrapped stream.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.UnalignedWritesIn">
            <summary>
            Gets the number of requested unaligned writes.
            </summary>
            <remarks>Unaligned writes are writes where the write doesn't start on a multiple of
            the block size.</remarks>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.TotalWritesIn">
            <summary>
            Gets the total number of requested writes.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStatistics.FreeReadBlocks">
            <summary>
            Gets the number of free blocks in the read cache.
            </summary>
        </member>
        <member name="T:DiscUtils.BlockCacheStream">
            <summary>
            A stream implementing a block-oriented read cache.
            </summary>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.#ctor(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the BlockCacheStream class.
            </summary>
            <param name="toWrap">The stream to wrap</param>
            <param name="ownership">Whether to assume ownership of <c>toWrap</c></param>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.#ctor(DiscUtils.SparseStream,DiscUtils.Ownership,DiscUtils.BlockCacheSettings)">
            <summary>
            Initializes a new instance of the BlockCacheStream class.
            </summary>
            <param name="toWrap">The stream to wrap</param>
            <param name="ownership">Whether to assume ownership of <c>toWrap</c></param>
            <param name="settings">The cache settings</param>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.Extents">
            <summary>
            Gets the parts of the stream that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.CanRead">
            <summary>
            Gets an indication as to whether the stream can be read.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.CanSeek">
            <summary>
            Gets an indication as to whether the stream position can be changed.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.CanWrite">
            <summary>
            Gets an indication as to whether the stream can be written to.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.Position">
            <summary>
            Gets and sets the current stream position.
            </summary>
        </member>
        <member name="P:DiscUtils.BlockCacheStream.Statistics">
            <summary>
            Gets the performance statistics for this instance.
            </summary>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a stream that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to fill</param>
            <param name="offset">The buffer offset to start from</param>
            <param name="count">The number of bytes to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Moves the stream position.
            </summary>
            <param name="offset">The origin-relative location</param>
            <param name="origin">The base location</param>
            <returns>The new absolute stream position</returns>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The new length</param>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream at the current location.
            </summary>
            <param name="buffer">The data to write</param>
            <param name="offset">The first byte to write from buffer</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:DiscUtils.BlockCacheStream.Dispose(System.Boolean)">
            <summary>
            Disposes of this instance, freeing up associated resources.
            </summary>
            <param name="disposing"><c>true</c> if invoked from <c>Dispose</c>, else <c>false</c>.</param>
        </member>
        <member name="T:DiscUtils.Buffer">
            <summary>
            Abstract base class for implementations of IBuffer.
            </summary>
        </member>
        <member name="P:DiscUtils.Buffer.CanRead">
            <summary>
            Gets a value indicating whether this buffer can be read.
            </summary>
        </member>
        <member name="P:DiscUtils.Buffer.CanWrite">
            <summary>
            Gets a value indicating whether this buffer can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.Buffer.Capacity">
            <summary>
            Gets the current capacity of the buffer, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.Buffer.Extents">
            <summary>
            Gets the parts of the stream that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="M:DiscUtils.Buffer.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the buffer into a byte array.
            </summary>
            <param name="pos">The offset within the buffer to start reading.</param>
            <param name="buffer">The destination byte array.</param>
            <param name="offset">The start offset within the destination buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The actual number of bytes read</returns>
        </member>
        <member name="M:DiscUtils.Buffer.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array into the buffer.
            </summary>
            <param name="pos">The start offset within the buffer.</param>
            <param name="buffer">The source byte array.</param>
            <param name="offset">The start offset within the source byte array.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:DiscUtils.Buffer.Clear(System.Int64,System.Int32)">
            <summary>
            Clears bytes from the buffer.
            </summary>
            <param name="pos">The start offset within the buffer.</param>
            <param name="count">The number of bytes to ckear</param>
            <remarks>
            <para>Logically equivalent to writing <c>count</c> null/zero bytes to the buffer, some
            implementations determine that some (or all) of the range indicated is not actually
            stored.  There is no direct, automatic, correspondance to clearing bytes and them
            not being represented as an 'extent' - for example, the implementation of the underlying
            stream may not permit fine-grained extent storage.</para>
            <para>It is always safe to call this method to 'zero-out' a section of a buffer, regardless of
            the underlying buffer implementation.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.Buffer.Flush">
            <summary>
            Flushes all data to the underlying storage.
            </summary>
            <remarks>The default behaviour, implemented by this class, is to take no action.</remarks>
        </member>
        <member name="M:DiscUtils.Buffer.SetCapacity(System.Int64)">
            <summary>
            Sets the capacity of the buffer, truncating if appropriate.
            </summary>
            <param name="value">The desired capacity of the buffer.</param>
        </member>
        <member name="M:DiscUtils.Buffer.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a buffer that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="T:DiscUtils.BufferStream">
            <summary>
            Converts a Buffer into a Stream.
            </summary>
        </member>
        <member name="M:DiscUtils.BufferStream.#ctor(DiscUtils.IBuffer,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the BufferStream class.
            </summary>
            <param name="buffer">The buffer to use</param>
            <param name="access">The access permitted to clients</param>
        </member>
        <member name="P:DiscUtils.BufferStream.CanRead">
            <summary>
            Gets an indication of whether read access is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.BufferStream.CanSeek">
            <summary>
            Gets an indication of whether seeking is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.BufferStream.CanWrite">
            <summary>
            Gets an indication of whether write access is permitted.
            </summary>
        </member>
        <member name="P:DiscUtils.BufferStream.Length">
            <summary>
            Gets the length of the stream (the capacity of the underlying buffer).
            </summary>
        </member>
        <member name="P:DiscUtils.BufferStream.Position">
            <summary>
            Gets and sets the current position within the stream.
            </summary>
        </member>
        <member name="P:DiscUtils.BufferStream.Extents">
            <summary>
            Gets the stored extents within the sparse stream.
            </summary>
        </member>
        <member name="M:DiscUtils.BufferStream.Flush">
            <summary>
            Flushes all data to the underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.BufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the stream.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="offset">The start offset within the destination buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:DiscUtils.BufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Changes the current stream position.
            </summary>
            <param name="offset">The origin-relative stream position.</param>
            <param name="origin">The origin for the stream position.</param>
            <returns>The new stream position</returns>
        </member>
        <member name="M:DiscUtils.BufferStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream (the underlying buffer's capacity).
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:DiscUtils.BufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the stream.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The starting offset within buffer.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:DiscUtils.BufferStream.Clear(System.Int32)">
            <summary>
            Clears bytes from the stream.
            </summary>
            <param name="count">The number of bytes (from the current position) to clear</param>
            <remarks>
            <para>Logically equivalent to writing <c>count</c> null/zero bytes to the stream, some
            implementations determine that some (or all) of the range indicated is not actually
            stored.  There is no direct, automatic, correspondance to clearing bytes and them
            not being represented as an 'extent' - for example, the implementation of the underlying
            stream may not permit fine-grained extent storage.</para>
            <para>It is always safe to call this method to 'zero-out' a section of a stream, regardless of
            the underlying stream implementation.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.BufferStream.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a stream that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="P:DiscUtils.BuilderExtent.StreamExtents">
            <summary>
            Gets the parts of the stream that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="T:DiscUtils.ChsAddress">
            <summary>
            Class whose instances represent a CHS (Cylinder, Head, Sector) address on a disk.
            </summary>
            <remarks>Instances of this class are immutable.</remarks>
        </member>
        <member name="F:DiscUtils.ChsAddress.First">
            <summary>
            The address of the first sector on any disk.
            </summary>
        </member>
        <member name="M:DiscUtils.ChsAddress.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ChsAddress class.
            </summary>
            <param name="cylinder">The number of cylinders of the disk</param>
            <param name="head">The number of heads (aka platters) of the disk</param>
            <param name="sector">The number of sectors per track/cylinder of the disk</param>
        </member>
        <member name="P:DiscUtils.ChsAddress.Cylinder">
            <summary>
            Gets the cylinder number (zero-based).
            </summary>
        </member>
        <member name="P:DiscUtils.ChsAddress.Head">
            <summary>
            Gets the head (zero-based).
            </summary>
        </member>
        <member name="P:DiscUtils.ChsAddress.Sector">
            <summary>
            Gets the sector number (one-based).
            </summary>
        </member>
        <member name="M:DiscUtils.ChsAddress.Equals(System.Object)">
            <summary>
            Determines if this object is equivalent to another.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is equalivalent, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.ChsAddress.GetHashCode">
            <summary>
            Calculates the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DiscUtils.ChsAddress.ToString">
            <summary>
            Gets a string representation of this object, in the form (C/H/S).
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="T:DiscUtils.ConcatStream">
            <summary>
            The concatenation of multiple streams (read-only, for now).
            </summary>
        </member>
        <member name="T:DiscUtils.DataReader">
            <summary>
            Base class for reading binary data from a stream.
            </summary>
        </member>
        <member name="T:DiscUtils.DiscDirectoryInfo">
            <summary>
            Provides information about a directory on a disc.
            </summary>
            <remarks>
            This class allows navigation of the disc directory/file hierarchy.
            </remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.#ctor(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Initializes a new instance of the DiscDirectoryInfo class.
            </summary>
            <param name="fileSystem">The file system the directory info relates to</param>
            <param name="path">The path within the file system of the directory</param>
        </member>
        <member name="P:DiscUtils.DiscDirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscDirectoryInfo.FullName">
            <summary>
            Gets the full path of the directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Delete">
            <summary>
            Deletes a directory, even if it's not empty.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes a directory, with the caller choosing whether to recurse.
            </summary>
            <param name="recursive"><c>true</c> to delete all child node, <c>false</c> to fail if the directory is not empty</param>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a directory and it's contents to a new path.
            </summary>
            <param name="destinationDirName">The destination directory name</param>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories">
            <summary>
            Gets all child directories.
            </summary>
            <returns>An array of child directories</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Gets all child directories matching a search pattern.
            </summary>
            <param name="pattern">The search pattern</param>
            <returns>An array of child directories, or empty if none match</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Gets all descendant directories matching a search pattern.
            </summary>
            <param name="pattern">The search pattern</param>
            <param name="searchOption">Whether to search just this directory, or all children</param>
            <returns>An array of descendant directories, or empty if none match</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).  The option parameter determines whether only immediate
            children, or all children are returned.</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles">
            <summary>
            Gets all files.
            </summary>
            <returns>An array of files.</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles(System.String)">
            <summary>
            Gets all files matching a search pattern.
            </summary>
            <param name="pattern">The search pattern</param>
            <returns>An array of files, or empty if none match</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Gets all descendant files matching a search pattern.
            </summary>
            <param name="pattern">The search pattern</param>
            <param name="searchOption">Whether to search just this directory, or all children</param>
            <returns>An array of descendant files, or empty if none match</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).  The option parameter determines whether only immediate
            children, or all children are returned.</remarks>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFileSystemInfos">
            <summary>
            Gets all files and directories in this directory.
            </summary>
            <returns>An array of files and directories.</returns>
        </member>
        <member name="M:DiscUtils.DiscDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Gets all files and directories in this directory.
            </summary>
            <param name="pattern">The search pattern</param>
            <returns>An array of files and directories.</returns>
            <remarks>The search pattern can include the wildcards * (matching 0 or more characters)
            and ? (matching 1 character).</remarks>
        </member>
        <member name="T:DiscUtils.DiscFileInfo">
            <summary>
            Provides information about a file on a disc.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Exists">
            <summary>
            Gets a value indicating whether the file exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the file is read-only.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileInfo.Length">
            <summary>
            Gets the length of the current file in bytes.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Delete">
            <summary>
            Deletes a file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this <see cref="T:DiscUtils.DiscFileInfo"/>.
            </summary>
            <returns>The newly created writer</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="destinationFileName">The destination file</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="destinationFileName">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Create">
            <summary>
            Creates a new file for reading and writing.
            </summary>
            <returns>The newly created stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.CreateText">
            <summary>
            Creates a new <see cref="T:System.IO.StreamWriter"/> that writes a new text file.
            </summary>
            <returns>A new stream writer that can write to the file contents.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.MoveTo(System.String)">
            <summary>
            Moves a file to a new location.
            </summary>
            <param name="destinationFileName">The new name of the file</param>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens the current file.
            </summary>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The newly created stream</returns>
            <remarks>Read-only file systems only support <c>FileMode.Open</c>.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the current file.
            </summary>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The newly created stream</returns>
            <remarks>Read-only file systems only support <c>FileMode.Open</c> and <c>FileAccess.Read</c>.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenRead">
            <summary>
            Opens an existing file for read-only access.
            </summary>
            <returns>The newly created stream</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenText">
            <summary>
            Opens an existing file for reading as UTF-8 text.
            </summary>
            <returns>The newly created reader</returns>
        </member>
        <member name="M:DiscUtils.DiscFileInfo.OpenWrite">
            <summary>
            Opens a file for writing.
            </summary>
            <returns>The newly created stream.</returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystem">
            <summary>
            Provides the base class for all file systems.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.#ctor">
            <summary>
            Initializes a new instance of the DiscFileSystem class.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the DiscFileSystem class.
            </summary>
            <param name="defaultOptions">The options instance to use for this file system instance.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Finalize">
            <summary>
            Finalizes an instance of the DiscFileSystem class.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.Options">
            <summary>
            Gets the file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.FriendlyName">
            <summary>
            Gets a friendly description of the file system type.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.CanWrite">
            <summary>
            Gets a value indicating whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystem.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the directory exists</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file or directory exists</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect</param>
            <returns>The attributes of the file or directory</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path</param>
            <returns>The representing object</returns>
            <remarks>The file does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path</param>
            <returns>The representing object</returns>
            <remarks>The directory does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path</param>
            <returns>The representing object</returns>
            <remarks>The file system object does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.ReadBootCode">
            <summary>
            Reads the boot code of the file system into a byte array.
            </summary>
            <returns>The boot code, or <c>null</c> if not available</returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Dispose">
            <summary>
            Disposes of this instance, releasing all resources.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystem.Dispose(System.Boolean)">
            <summary>
            Disposes of this instance.
            </summary>
            <param name="disposing">true if Disposing</param>
        </member>
        <member name="T:DiscUtils.ReportLevels">
            <summary>
            Flags for the amount of detail to include in a report.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.None">
            <summary>
            Report no information.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Information">
            <summary>
            Report informational level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Warnings">
            <summary>
            Report warning level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.Errors">
            <summary>
            Report error level items.
            </summary>
        </member>
        <member name="F:DiscUtils.ReportLevels.All">
            <summary>
            Report all items.
            </summary>
        </member>
        <member name="T:DiscUtils.DiscFileSystemChecker">
            <summary>
            Base class for objects that validate file system integrity.
            </summary>
            <remarks>Instances of this class do not offer the ability to fix/correct
            file system issues, just to perform a limited number of checks on
            integrity of the file system.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystemChecker.Check(System.IO.TextWriter,DiscUtils.ReportLevels)">
            <summary>
            Checks the integrity of a file system held in a stream.
            </summary>
            <param name="reportOutput">A report on issues found</param>
            <param name="levels">The amount of detail to report</param>
            <returns><c>true</c> if the file system appears valid, else <c>false</c></returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystemInfo">
            <summary>
            Provides the base class for both <see cref="T:DiscUtils.DiscFileInfo"/> and <see cref="T:DiscUtils.DiscDirectoryInfo"/> objects.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.FileSystem">
            <summary>
            Gets the file system the referenced file or directory exists on.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.FullName">
            <summary>
            Gets the full path of the file or directory.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Extension">
            <summary>
            Gets the extension part of the file or directory name.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Attributes">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Parent">
            <summary>
            Gets the <see cref="T:DiscUtils.DiscDirectoryInfo"/> of the directory containing the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether the file system object exists.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time (in local time) of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time (in UTC) of the current <see cref="T:DiscUtils.DiscFileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the last time (in local time) the file or directory was accessed.
            </summary>
            <remarks>Read-only file systems will never update this value, it will remain at a fixed value.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the last time (in UTC) the file or directory was accessed.
            </summary>
            <remarks>Read-only file systems will never update this value, it will remain at a fixed value.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the last time (in local time) the file or directory was written to.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the last time (in UTC) the file or directory was written to.
            </summary>
        </member>
        <member name="P:DiscUtils.DiscFileSystemInfo.Path">
            <summary>
            Gets the path to the referenced file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.Equals(System.Object)">
            <summary>
            Indicates if <paramref name="obj"/> is equivalent to this object.
            </summary>
            <param name="obj">The object to compare</param>
            <returns><c>true</c> if <paramref name="obj"/> is equivalent, else <c>false</c></returns>
        </member>
        <member name="M:DiscUtils.DiscFileSystemInfo.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="T:DiscUtils.DiscFileSystemOptions">
            <summary>
            Common file system options.
            </summary>
            <remarks>Not all options are honoured by all file systems.</remarks>
        </member>
        <member name="M:DiscUtils.DiscFileSystemOptions.#ctor">
            <summary>
            Initializes a new instance of the DiscFileSystemOptions class.
            </summary>
            <remarks>You shouldn't normally create a new instance.  File systems will provide
            an instance of the correct derived type.</remarks>
        </member>
        <member name="P:DiscUtils.DiscFileSystemOptions.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator the file system should use.
            </summary>
            <remarks>This option is normally <c>null</c>, which is fine for most purposes.
            Use this option when you need to finely control the filesystem for
            reproducibility of behaviour (for example in a test harness).</remarks>
        </member>
        <member name="T:DiscUtils.DiskImageBuilder">
            <summary>
            Base class for all disk image builders.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.Content">
            <summary>
            Gets or sets the content for this disk, implying the size of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.Geometry">
            <summary>
            Gets or sets the geometry of this disk, will be implied from the content stream if not set.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.BiosGeometry">
            <summary>
            Gets or sets the geometry of this disk, as reported by the BIOS, will be implied from the content stream if not set.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.GenericAdapterType">
            <summary>
            Gets or sets the adapter type for created virtual disk, for file formats that encode this information.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageBuilder.PreservesBiosGeometry">
            <summary>
            Gets a value indicating whether this file format preserves BIOS geometry information.
            </summary>
        </member>
        <member name="M:DiscUtils.DiskImageBuilder.GetBuilder(System.String,System.String)">
            <summary>
            Gets an instance that constructs the specified type (and variant) of virtual disk image.
            </summary>
            <param name="type">The type of image to build (VHD, VMDK, etc)</param>
            <param name="variant">The variant type (differencing/dynamic, fixed/static, etc).</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:DiscUtils.DiskImageBuilder.Build(System.String)">
            <summary>
            Initiates the construction of the disk image.
            </summary>
            <param name="baseName">The base name for the disk images.</param>
            <returns>A set of one or more logical files that constitute the
            disk image.  The first file is the 'primary' file that is normally attached to VMs.</returns>
            <remarks>The supplied <c>baseName</c> is the start of the file name, with no file
            extension.  The set of file specifications will indicate the actual name corresponding
            to each logical file that comprises the disk image.  For example, given a base name
            'foo', the files 'foo.vmdk' and 'foo-flat.vmdk' could be returned.</remarks>
        </member>
        <member name="T:DiscUtils.DiskImageFileSpecification">
            <summary>
            Describes a particular file that is a constituent part of a virtual disk.
            </summary>
        </member>
        <member name="P:DiscUtils.DiskImageFileSpecification.Name">
            <summary>
            Gets name of the file.
            </summary>
        </member>
        <member name="M:DiscUtils.DiskImageFileSpecification.OpenStream">
            <summary>
            Gets the object that provides access to the file's content.
            </summary>
            <returns>A stream object that contains the file's content</returns>
        </member>
        <member name="F:DiscUtils.Fat.ClusterReader._clusterSize">
            <summary>
            Pre-calculated value because of number of uses of this externally.
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.ClusterStream.WriteToCluster(System.UInt32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes up to the next cluster boundary, making sure to preserve existing data in the cluster
            that falls outside of the updated range.
            </summary>
            <param name="cluster">The cluster to write to.</param>
            <param name="pos">The file position of the write (within the cluster)</param>
            <param name="buffer">The buffer with the new data</param>
            <param name="offset">Offset into buffer of the first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <returns>The number of bytes written - either count, or the number that fit up to
            the cluster boundary.</returns>
        </member>
        <member name="M:DiscUtils.Fat.ClusterStream.ExtendChain">
            <summary>
            Adds a new cluster to the end of the existing chain, by allocating a free cluster.
            </summary>
            <returns>The cluster allocated</returns>
            <remarks>This method does not initialize the data in the cluster, the caller should
            perform a write to ensure the cluster data is in known state.</remarks>
        </member>
        <member name="M:DiscUtils.Fat.Directory.#ctor(DiscUtils.Fat.Directory,System.Int64)">
            <summary>
            Initializes a new instance of the Directory class.  Use this constructor to represent non-root directories.
            </summary>
            <param name="parent">The parent directory</param>
            <param name="parentId">The identity of the entry representing this directory in the parent</param>
        </member>
        <member name="M:DiscUtils.Fat.Directory.#ctor(DiscUtils.Fat.FatFileSystem,System.IO.Stream)">
            <summary>
            Initializes a new instance of the Directory class.  Use this constructor to represent the root directory.
            </summary>
            <param name="fileSystem">The file system</param>
            <param name="dirStream">The stream containing the directory info</param>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.EndOfChain">
            <summary>
            The End-of-chain marker to WRITE (SetNext).  Don't use this value to test for end of chain.
            </summary>
            <remarks>
            The actual end-of-chain marker bits on disk vary by FAT type, and can end ...F8 through ...FF.
            </remarks>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.BadCluster">
            <summary>
            The Bad-Cluster marker to WRITE (SetNext).  Don't use this value to test for bad clusters.
            </summary>
            <remarks>
            The actual bad-cluster marker bits on disk vary by FAT type.
            </remarks>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.FreeCluster">
            <summary>
            The Free-Cluster marker to WRITE (SetNext).  Don't use this value to test for free clusters.
            </summary>
            <remarks>
            The actual free-cluster marker bits on disk vary by FAT type.
            </remarks>
        </member>
        <member name="T:DiscUtils.Fat.FatFileSystem">
            <summary>
            Class for accessing FAT file systems.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatFileSystem.Epoch">
            <summary>
            The Epoch for FAT file systems (1st Jan, 1980).
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <remarks>
            Local time is the effective timezone of the new instance.
            </remarks>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <remarks>
            Local time is the effective timezone of the new instance.
            </remarks>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.TimeConverter)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="timeConverter">A delegate to convert to/from the file system's timezone.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Ownership,DiscUtils.TimeConverter)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <param name="timeConverter">A delegate to convert to/from the file system's timezone.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Ownership,DiscUtils.FileSystemParameters)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <param name="parameters">The parameters for the file system.</param>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatOptions">
            <summary>
            Gets the FAT file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatVariant">
            <summary>
            Gets the FAT variant of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FriendlyName">
            <summary>
            Gets the friendly name for the file system, including FAT variant.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.OemName">
            <summary>
            Gets the OEM name from the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BytesPerSector">
            <summary>
            Gets the number of bytes per sector (as stored in the file-system meta data).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.SectorsPerCluster">
            <summary>
            Gets the number of contiguous sectors that make up one cluster.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ReservedSectorCount">
            <summary>
            Gets the number of reserved sectors at the start of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatCount">
            <summary>
            Gets the number of FATs present.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.MaxRootDirectoryEntries">
            <summary>
            Gets the maximum number of root directory entries (on FAT variants that have a limit).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.TotalSectors">
            <summary>
            Gets the total number of sectors on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Media">
            <summary>
            Gets the Media marker byte, which indicates fixed or removable media.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatSize">
            <summary>
            Gets the size of a single FAT, in sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.SectorsPerTrack">
            <summary>
            Gets the number of sectors per logical track.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Heads">
            <summary>
            Gets the number of logical heads.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.HiddenSectors">
            <summary>
            Gets the number of hidden sectors, hiding partition tables, etc.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BiosDriveNumber">
            <summary>
            Gets the BIOS drive number for BIOS Int 13h calls.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ExtendedBootSignaturePresent">
            <summary>
            Gets a value indicating whether the VolumeId, VolumeLabel and FileSystemType fields are valid.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.VolumeId">
            <summary>
            Gets the volume serial number.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FileSystemType">
            <summary>
            Gets the (informational only) file system type recorded in the meta-data.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ActiveFat">
            <summary>
            Gets the active FAT (zero-based index).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.MirrorFat">
            <summary>
            Gets a value indicating whether FAT changes are mirrored to all copies of the FAT.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Version">
            <summary>
            Gets the file-system version (usually 0)
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.RootDirectoryCluster">
            <summary>
            Gets the cluster number of the first cluster of the root directory (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FSInfoSector">
            <summary>
            Gets the sector location of the FSINFO structure (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BackupBootSector">
            <summary>
            Gets the Sector location of the backup boot sector (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.CanWrite">
            <summary>
            Indicates if this file system is read-only or read-write.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatFloppy(System.IO.Stream,DiscUtils.FloppyDiskType,System.String)">
            <summary>
            Creates a formatted floppy disk image in a stream.
            </summary>
            <param name="stream">The stream to write the blank image to</param>
            <param name="type">The type of floppy to create</param>
            <param name="label">The volume label for the floppy (or null)</param>
            <returns>An object that provides access to the newly created floppy disk image</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatPartition(DiscUtils.VirtualDisk,System.Int32,System.String)">
            <summary>
            Formats a virtual hard disk partition.
            </summary>
            <param name="disk">The disk containing the partition</param>
            <param name="partitionIndex">The index of the partition on the disk</param>
            <param name="label">The volume label for the partition (or null)</param>
            <returns>An object that provides access to the newly created partition file system</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatPartition(System.IO.Stream,System.String,DiscUtils.Geometry,System.Int32,System.Int32,System.Int16)">
            <summary>
            Creates a formatted hard disk partition in a stream.
            </summary>
            <param name="stream">The stream to write the new file system to</param>
            <param name="label">The volume label for the partition (or null)</param>
            <param name="diskGeometry">The geometry of the disk containing the partition</param>
            <param name="firstSector">The starting sector number of this partition (hide's sectors in other partitions)</param>
            <param name="sectorCount">The number of sectors in this partition</param>
            <param name="reservedSectors">The number of reserved sectors at the start of the partition</param>
            <returns>An object that provides access to the newly created partition file system</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Detect(System.IO.Stream)">
            <summary>
            Detects if a stream contains a FAT file system.
            </summary>
            <param name="stream">The stream to inspect</param>
            <returns><c>true</c> if the stream appears to be a FAT file system, else <c>false</c></returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file for reading and/or writing.
            </summary>
            <param name="path">The full path to the file</param>
            <param name="mode">The file mode</param>
            <param name="access">The desired access</param>
            <returns>The stream to the opened file</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect</param>
            <returns>The attributes of the file or directory</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The time the file or directory was last accessed</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The time the file or directory was last accessed</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The time the file or directory was last modified</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The time the file or directory was last modified</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The directory to create.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the directory exists</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file or directory exists</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Dispose(System.Boolean)">
            <summary>
            Disposes of this instance.
            </summary>
            <param name="disposing">true if Disposing</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.WriteBPB(System.Byte[],System.UInt32,DiscUtils.Fat.FatType,System.UInt16,System.UInt32,System.UInt16,System.Byte,DiscUtils.Geometry,System.Boolean,System.UInt32,System.String)">
            <summary>
            Writes a FAT12/FAT16 BPB.
            </summary>
            <param name="bootSector">The buffer to fill</param>
            <param name="sectors">The total capacity of the disk (in sectors)</param>
            <param name="fatType">The number of bits in each FAT entry</param>
            <param name="maxRootEntries">The maximum number of root directory entries</param>
            <param name="hiddenSectors">The number of hidden sectors before this file system (i.e. partition offset)</param>
            <param name="reservedSectors">The number of reserved sectors before the FAT</param>
            <param name="sectorsPerCluster">The number of sectors per cluster</param>
            <param name="diskGeometry">The geometry of the disk containing the Fat file system</param>
            <param name="isFloppy">Indicates if the disk is a removable media (a floppy disk)</param>
            <param name="volId">The disk's volume Id</param>
            <param name="label">The disk's label (or null)</param>
        </member>
        <member name="T:DiscUtils.Fat.FatFileSystemOptions">
            <summary>
            FAT file system options.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystemOptions.FileNameEncoding">
            <summary>
            Gets or sets the character encoding used for file names.
            </summary>
        </member>
        <member name="T:DiscUtils.Fat.FatType">
            <summary>
            Enumeration of known FAT types.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.None">
            <summary>
            Represents no known FAT type.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat12">
            <summary>
            Represents a 12-bit FAT.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat16">
            <summary>
            Represents a 16-bit FAT.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat32">
            <summary>
            Represents a 32-bit FAT.
            </summary>
        </member>
        <member name="T:DiscUtils.FileSystemInfo">
            <summary>
            Base class holding information about a file system.
            </summary>
            <remarks>
            File system implementations derive from this class, to provide information about the file system.
            </remarks>
        </member>
        <member name="P:DiscUtils.FileSystemInfo.Name">
            <summary>
            Gets the name of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.FileSystemInfo.Description">
            <summary>
            Gets a one-line description of the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(DiscUtils.VolumeInfo)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access</param>
            <returns>A file system instance</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(System.IO.Stream)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access</param>
            <returns>A file system instance</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(DiscUtils.VolumeInfo,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access</param>
            <param name="parameters">Parameters for the file system</param>
            <returns>A file system instance</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.Open(System.IO.Stream,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access</param>
            <param name="parameters">Parameters for the file system</param>
            <returns>A file system instance</returns>
        </member>
        <member name="M:DiscUtils.FileSystemInfo.ToString">
            <summary>
            Gets the name of the file system.
            </summary>
            <returns>The file system name</returns>
        </member>
        <member name="T:DiscUtils.TimeConverter">
            <summary>
            Converts a time to/from UTC.
            </summary>
            <param name="time">The time to convert</param>
            <param name="toUtc"><c>true</c> to convert FAT time to UTC, <c>false</c> to convert UTC to FAT time</param>
            <returns>The converted time.</returns>
        </member>
        <member name="T:DiscUtils.FileSystemParameters">
            <summary>
            Class with generic file system parameters.
            </summary>
            <remarks>Note - not all parameters apply to all types of file system.</remarks>
        </member>
        <member name="P:DiscUtils.FileSystemParameters.FileNameEncoding">
            <summary>
            Gets or sets the character encoding for file names, or <c>null</c> for default.
            </summary>
            <remarks>Some file systems, such as FAT, don't specify a particular character set for
            file names.  This parameter determines the character set that will be used for such
            file systems.</remarks>
        </member>
        <member name="P:DiscUtils.FileSystemParameters.TimeConverter">
            <summary>
            Gets or sets the algorithm to convert file system time to UTC.
            </summary>
            <remarks>Some file system, such as FAT, don't have a defined way to convert from file system
            time (local time where the file system is authored) to UTC time.  This parameter determines
            the algorithm to use.</remarks>
        </member>
        <member name="T:DiscUtils.FloppyDiskType">
            <summary>
            The supported Floppy Disk logical formats.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.DoubleDensity">
            <summary>
            720KiB capacity disk.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.HighDensity">
            <summary>
            1440KiB capacity disk.
            </summary>
        </member>
        <member name="F:DiscUtils.FloppyDiskType.Extended">
            <summary>
            2880KiB capacity disk.
            </summary>
        </member>
        <member name="T:DiscUtils.GenericDiskAdapterType">
            <summary>
            Well known hard disk adaptor types.
            </summary>
        </member>
        <member name="F:DiscUtils.GenericDiskAdapterType.Ide">
            <summary>
            IDE adaptor.
            </summary>
        </member>
        <member name="F:DiscUtils.GenericDiskAdapterType.Scsi">
            <summary>
            SCSI adaptor.
            </summary>
        </member>
        <member name="T:DiscUtils.Geometry">
            <summary>
            Class whose instances represent disk geometries.
            </summary>
            <remarks>Instances of this class are immutable.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.  The default 512 bytes per sector is assumed.
            </summary>
            <param name="cylinders">The number of cylinders of the disk</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk</param>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.
            </summary>
            <param name="cylinders">The number of cylinders of the disk</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk</param>
            <param name="bytesPerSector">The number of bytes per sector of the disk</param>
        </member>
        <member name="M:DiscUtils.Geometry.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Geometry class.
            </summary>
            <param name="capacity">The total capacity of the disk</param>
            <param name="headsPerCylinder">The number of heads (aka platters) of the disk</param>
            <param name="sectorsPerTrack">The number of sectors per track/cylinder of the disk</param>
            <param name="bytesPerSector">The number of bytes per sector of the disk</param>
        </member>
        <member name="P:DiscUtils.Geometry.Null">
            <summary>
            Gets a null geometry, which has 512-byte sectors but zero sectors, tracks or cylinders.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.Cylinders">
            <summary>
            Gets the number of cylinders.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.HeadsPerCylinder">
            <summary>
            Gets the number of heads (aka platters).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.SectorsPerTrack">
            <summary>
            Gets the number of sectors per track.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.BytesPerSector">
            <summary>
            Gets the number of bytes in each sector.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.TotalSectors">
            <summary>
            Gets the total size of the disk (in sectors).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.Capacity">
            <summary>
            Gets the total capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.LastSector">
            <summary>
            Gets the address of the last sector on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsBiosSafe">
            <summary>
            Gets a value indicating whether the Geometry is consistent with the values a BIOS can support.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsIdeSafe">
            <summary>
            Gets a value indicating whether the Geometry is consistent with the values IDE can represent.
            </summary>
        </member>
        <member name="P:DiscUtils.Geometry.IsBiosAndIdeSafe">
            <summary>
            Gets a value indicating whether the Geometry is representable both by the BIOS and by IDE.
            </summary>
        </member>
        <member name="M:DiscUtils.Geometry.LargeBiosGeometry(DiscUtils.Geometry)">
            <summary>
            Gets the 'Large' BIOS geometry for a disk, given it's physical geometry.
            </summary>
            <param name="ideGeometry">The physical (aka IDE) geometry of the disk</param>
            <returns>The geometry a BIOS using the 'Large' method for calculating disk geometry will indicate for the disk</returns>
        </member>
        <member name="M:DiscUtils.Geometry.LbaAssistedBiosGeometry(System.Int64)">
            <summary>
            Gets the 'LBA Assisted' BIOS geometry for a disk, given it's capacity.
            </summary>
            <param name="capacity">The capacity of the disk</param>
            <returns>The geometry a BIOS using the 'LBA Assisted' method for calculating disk geometry will indicate for the disk</returns>
        </member>
        <member name="M:DiscUtils.Geometry.MakeBiosSafe(DiscUtils.Geometry,System.Int64)">
            <summary>
            Converts a geometry into one that is BIOS-safe, if not already.
            </summary>
            <param name="geometry">The geometry to make BIOS-safe.</param>
            <param name="capacity">The capacity of the disk.</param>
            <returns>The new geometry</returns>
            <remarks>This method returns the LBA-Assisted geometry if the given geometry isn't BIOS-safe.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.FromCapacity(System.Int64)">
            <summary>
            Calculates a sensible disk geometry for a disk capacity using the VHD algorithm (errs under).
            </summary>
            <param name="capacity">The desired capacity of the disk</param>
            <returns>The appropriate disk geometry.</returns>
            <remarks>The geometry returned tends to produce a disk with less capacity
            than requested (an exact capacity is not always possible).  The geometry returned is the IDE
            (aka Physical) geometry of the disk, not necessarily the geometry used by the BIOS.</remarks>
        </member>
        <member name="M:DiscUtils.Geometry.ToLogicalBlockAddress(DiscUtils.ChsAddress)">
            <summary>
            Converts a CHS (Cylinder,Head,Sector) address to a LBA (Logical Block Address).
            </summary>
            <param name="chsAddress">The CHS address to convert</param>
            <returns>The Logical Block Address (in sectors)</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToLogicalBlockAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a CHS (Cylinder,Head,Sector) address to a LBA (Logical Block Address).
            </summary>
            <param name="cylinder">The cylinder of the address</param>
            <param name="head">The head of the address</param>
            <param name="sector">The sector of the address</param>
            <returns>The Logical Block Address (in sectors)</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToChsAddress(System.Int64)">
            <summary>
            Converts a LBA (Logical Block Address) to a CHS (Cylinder, Head, Sector) address.
            </summary>
            <param name="logicalBlockAddress">The logical block address (in sectors)</param>
            <returns>The address in CHS form.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.TranslateToBios(DiscUtils.GeometryTranslation)">
            <summary>
            Translates an IDE (aka Physical) geometry to a BIOS (aka Logical) geometry.
            </summary>
            <param name="translation">The translation to perform</param>
            <returns>The translated disk geometry</returns>
        </member>
        <member name="M:DiscUtils.Geometry.TranslateToBios(System.Int64,DiscUtils.GeometryTranslation)">
            <summary>
            Translates an IDE (aka Physical) geometry to a BIOS (aka Logical) geometry.
            </summary>
            <param name="capacity">The capacity of the disk, required if the geometry is an approximation on the actual disk size</param>
            <param name="translation">The translation to perform</param>
            <returns>The translated disk geometry</returns>
        </member>
        <member name="M:DiscUtils.Geometry.Equals(System.Object)">
            <summary>
            Determines if this object is equivalent to another.
            </summary>
            <param name="obj">The object to test against.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is equalivalent, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.GetHashCode">
            <summary>
            Calculates the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DiscUtils.Geometry.ToString">
            <summary>
            Gets a string representation of this object, in the form (C/H/S).
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="T:DiscUtils.GeometryTranslation">
            <summary>
            Enumeration of standard BIOS disk geometry translation methods
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.None">
            <summary>
            Apply no translation.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Auto">
            <summary>
            Automatic, based on the physical geometry select the most appropriate translation.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Lba">
            <summary>
            LBA assisted translation, based on just the disk capacity.
            </summary>
        </member>
        <member name="F:DiscUtils.GeometryTranslation.Large">
            <summary>
            Bit-shifting translation, based on the physical geometry of the disk.
            </summary>
        </member>
        <member name="T:DiscUtils.IBuffer">
            <summary>
            Interface shared by all buffers.
            </summary>
            <remarks>
            Buffers are very similar to streams, except the buffer has no notion of
            'current position'.  All I/O operations instead specify the position, as
            needed.  Buffers also support sparse behaviour.
            </remarks>
        </member>
        <member name="P:DiscUtils.IBuffer.CanRead">
            <summary>
            Gets a value indicating whether this buffer can be read.
            </summary>
        </member>
        <member name="P:DiscUtils.IBuffer.CanWrite">
            <summary>
            Gets a value indicating whether this buffer can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.IBuffer.Capacity">
            <summary>
            Gets the current capacity of the buffer, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.IBuffer.Extents">
            <summary>
            Gets the parts of the buffer that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="M:DiscUtils.IBuffer.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the buffer into a byte array.
            </summary>
            <param name="pos">The offset within the buffer to start reading.</param>
            <param name="buffer">The destination byte array.</param>
            <param name="offset">The start offset within the destination buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The actual number of bytes read</returns>
        </member>
        <member name="M:DiscUtils.IBuffer.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array into the buffer.
            </summary>
            <param name="pos">The start offset within the buffer.</param>
            <param name="buffer">The source byte array.</param>
            <param name="offset">The start offset within the source byte array.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:DiscUtils.IBuffer.Clear(System.Int64,System.Int32)">
            <summary>
            Clears bytes from the buffer.
            </summary>
            <param name="pos">The start offset within the buffer.</param>
            <param name="count">The number of bytes to clear</param>
            <remarks>
            <para>Logically equivalent to writing <c>count</c> null/zero bytes to the buffer, some
            implementations determine that some (or all) of the range indicated is not actually
            stored.  There is no direct, automatic, correspondance to clearing bytes and them
            not being represented as an 'extent' - for example, the implementation of the underlying
            stream may not permit fine-grained extent storage.</para>
            <para>It is always safe to call this method to 'zero-out' a section of a buffer, regardless of
            the underlying buffer implementation.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.IBuffer.Flush">
            <summary>
            Flushes all data to the underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.IBuffer.SetCapacity(System.Int64)">
            <summary>
            Sets the capacity of the buffer, truncating if appropriate.
            </summary>
            <param name="value">The desired capacity of the buffer.</param>
        </member>
        <member name="M:DiscUtils.IBuffer.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a buffer that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="T:DiscUtils.IByteArraySerializable">
            <summary>
            Common interface for reading structures to/from byte arrays.
            </summary>
        </member>
        <member name="P:DiscUtils.IByteArraySerializable.Size">
            <summary>
            Gets the total number of bytes the structure occupies.
            </summary>
        </member>
        <member name="M:DiscUtils.IByteArraySerializable.ReadFrom(System.Byte[],System.Int32)">
            <summary>
            Reads the structure from a byte array.
            </summary>
            <param name="buffer">The buffer to read from</param>
            <param name="offset">The buffer offset to start reading from</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:DiscUtils.IByteArraySerializable.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Writes a structure to a byte array.
            </summary>
            <param name="buffer">The buffer to write to</param>
            <param name="offset">The buffer offste to start writing at</param>
        </member>
        <member name="T:DiscUtils.IFileSystem">
            <summary>
            Common interface for all file systems.
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.CanWrite">
            <summary>
            Gets a value indicating whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.IFileSystem.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.IFileSystem.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="M:DiscUtils.IFileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the directory exists</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file or directory exists</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect</param>
            <returns>The attributes of the file or directory</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path</param>
            <returns>The representing object</returns>
            <remarks>The file does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path</param>
            <returns>The representing object</returns>
            <remarks>The directory does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path</param>
            <returns>The representing object</returns>
            <remarks>The file system object does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.IFileSystem.ReadBootCode">
            <summary>
            Reads the boot code of the file system into a byte array.
            </summary>
            <returns>The boot code, or <c>null</c> if not available</returns>
        </member>
        <member name="T:DiscUtils.InvalidFileSystemException">
            <summary>
            Exception thrown when some invalid file system data is found, indicating probably corruption.
            </summary>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:DiscUtils.InvalidFileSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidFileSystemException class.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="T:DiscUtils.LogicalVolumeStatus">
            <summary>
            Enumeration of the health status of a logical volume.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.Healthy">
            <summary>
            The volume is healthy and fully functional.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.FailedRedundancy">
            <summary>
            The volume is completely accessible, but at degraded redundancy.
            </summary>
        </member>
        <member name="F:DiscUtils.LogicalVolumeStatus.Failed">
            <summary>
            The volume is wholely, or partly, inaccessible.
            </summary>
        </member>
        <member name="T:DiscUtils.LogicalVolumeInfo">
            <summary>
            Information about a logical disk volume, which may be backed by one or more physical volumes.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Status">
            <summary>
            Gets the status of the logical volume, indicating volume health.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Length">
            <summary>
            Gets the length of the volume (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.Identity">
            <summary>
            The stable identity for this logical volume.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be Geometry.Null).
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.LogicalVolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="M:DiscUtils.LogicalVolumeInfo.Open">
            <summary>
            Opens a stream with access to the content of the logical volume.
            </summary>
            <returns>The volume's content as a stream.</returns>
        </member>
        <member name="T:DiscUtils.ObjectCache`2">
            <summary>
            Caches objects.
            </summary>
            <typeparam name="K">The type of the object key</typeparam>
            <typeparam name="V">The type of the objects to cache</typeparam>
            <remarks>
            Can be use for two purposes - to ensure there is only one instance of a given object,
            and to prevent the need to recreate objects that are expensive to create.
            </remarks>
        </member>
        <member name="T:DiscUtils.Ownership">
            <summary>
            Enumeration used to indicate transfer of disposable objects.
            </summary>
        </member>
        <member name="F:DiscUtils.Ownership.None">
            <summary>
            Indicates there is no transfer of ownership.
            </summary>
        </member>
        <member name="F:DiscUtils.Ownership.Dispose">
            <summary>
            Indicates ownership of the stream is transfered, the owner should dispose of the stream when appropriate.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosExtendedPartitionTable.GetMetadataDiskExtents">
            <summary>
            Gets all of the disk ranges containing partition table data.
            </summary>
            <returns>Set of stream extents, indicated as byte offset from the start of the disk.</returns>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionInfo">
            <summary>
            Provides access to partition records in a BIOS (MBR) partition table.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.GuidType">
            <summary>
            Always returns <see cref="T:System.Guid"/>.Empty.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.BiosType">
            <summary>
            Gets the type of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.TypeAsString">
            <summary>
            Gets the type of the partition as a string.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.IsActive">
            <summary>
            Gets a value indicating whether this partition is active (bootable).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.Start">
            <summary>
            Gets the start of the partition as a CHS address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.End">
            <summary>
            Gets the end (inclusive) of the partition as a CHS address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.PrimaryIndex">
            <summary>
            Gets the index of the partition in the primary partition table, or <c>-1</c> if not a primary partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionInfo.IsPrimary">
            <summary>
            Gets a value indicating whether the partition is a primary (rather than extended) partition.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionInfo.Open">
            <summary>
            Opens a stream to access the content of the partition.
            </summary>
            <returns>The new stream</returns>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionTable">
            <summary>
            Represents a BIOS (MBR) Partition Table.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the BiosPartitionTable class.
            </summary>
            <param name="disk">The disk containing the partition table</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.#ctor(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the BiosPartitionTable class.
            </summary>
            <param name="disk">The stream containing the disk data</param>
            <param name="diskGeometry">The geometry of the disk</param>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.DiskGuid">
            <summary>
            Gets the GUID that uniquely identifies this disk, if supported (else returns <c>null</c>).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.BiosUserPartitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.BiosPartitionTable.Partitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.DetectGeometry(System.IO.Stream)">
            <summary>
            Makes a best guess at the geometry of a disk.
            </summary>
            <param name="disk">String containing the disk image to detect the geometry from</param>
            <returns>The detected geometry</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.IsValid(System.IO.Stream)">
            <summary>
            Indicates if a stream contains a valid partition table.
            </summary>
            <param name="disk">The stream to inspect</param>
            <returns><c>true</c> if the partition table is valid, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(DiscUtils.VirtualDisk)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(DiscUtils.VirtualDisk,DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Creates a new partition table on a disk containing a single partition.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <param name="type">The partition type for the single partition</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Initialize(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The stream containing the disk data</param>
            <param name="diskGeometry">The geometry of the disk</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new primary partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the new partition</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in bytes)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in bytes)</param>
            <returns>The index of the new partition</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition</param>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreatePrimaryByCylinder(System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Creates a new Primary Partition that occupies whole cylinders, for best compatibility.
            </summary>
            <param name="first">The first cylinder to include in the partition (inclusive)</param>
            <param name="last">The last cylinder to include in the partition (inclusive)</param>
            <param name="type">The BIOS (MBR) type of the new partition</param>
            <param name="markActive">Whether to mark the partition active (bootable)</param>
            <returns>The index of the new partition</returns>
            <remarks>If the cylinder 0 is given, the first track will not be used, to reserve space
            for the meta-data at the start of the disk.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.CreatePrimaryBySector(System.Int64,System.Int64,System.Byte,System.Boolean)">
            <summary>
            Creates a new Primary Partition, specified by Logical Block Addresses.
            </summary>
            <param name="first">The LBA address of the first sector (inclusive)</param>
            <param name="last">The LBA address of the last sector (inclusive)</param>
            <param name="type">The BIOS (MBR) type of the new partition</param>
            <param name="markActive">Whether to mark the partition active (bootable)</param>
            <returns>The index of the new partition</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.SetActivePartition(System.Int32)">
            <summary>
            Sets the active partition.
            </summary>
            <param name="index">The index of the primary partition to mark bootable, or <c>-1</c> for none</param>
            <remarks>The supplied index is the index within the primary partition, see <c>PrimaryIndex</c> on <c>BiosPartitionInfo</c>.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.GetMetadataDiskExtents">
            <summary>
            Gets all of the disk ranges containing partition table metadata.
            </summary>
            <returns>Set of stream extents, indicated as byte offset from the start of the disk.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTable.UpdateBiosGeometry(DiscUtils.Geometry)">
            <summary>
            Updates the CHS fields in partition records to reflect a new BIOS geometry.
            </summary>
            <param name="geometry">The disk's new BIOS geometry</param>
            <remarks>The partitions are not relocated to a cylinder boundary, just the CHS fields are updated on the
            assumption the LBA fields are definitive.</remarks>
        </member>
        <member name="T:DiscUtils.Partitions.BiosPartitionTypes">
            <summary>
            Convenient access to well-known BIOS (MBR) Partition Types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat12">
            <summary>
            Microsoft FAT12 (fewer than 32,680 sectors in the volume).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16Small">
            <summary>
            Microsoft FAT16 (32,680–65,535 sectors or 16 MB–33 MB).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Extended">
            <summary>
            Extended Partition (contains other partitions).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16">
            <summary>
            Microsoft BIGDOS FAT16 (33 MB–4 GB).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Ntfs">
            <summary>
            Installable File System (NTFS).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat32">
            <summary>
            Microsoft FAT32.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat32Lba">
            <summary>
            Microsoft FAT32, accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.Fat16Lba">
            <summary>
            Microsoft BIGDOS FAT16, accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.ExtendedLba">
            <summary>
            Extended Partition (contains other partitions), accessed using Int13h BIOS LBA extensions.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.WindowsDynamicVolume">
            <summary>
            Windows Logical Disk Manager dynamic volume.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxSwap">
            <summary>
            Linux Swap.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxNative">
            <summary>
            Linux Native (ext2 and friends).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.LinuxLvm">
            <summary>
            Linux Logical Volume Manager (LVM).
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.GptProtective">
            <summary>
            GUID Partition Table (GPT) protective partition, fills entire disk.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.BiosPartitionTypes.EfiSystem">
            <summary>
            EFI System partition on an MBR disk.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.BiosPartitionTypes.ToString(System.Byte)">
            <summary>
            Provides a string representation of some known BIOS partition types.
            </summary>
            <param name="type">The partition type to represent as a string.</param>
            <returns>The string representation</returns>
        </member>
        <member name="T:DiscUtils.Partitions.Crc32">
            <summary>
            Calculates CRC32 of buffers.
            </summary>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionInfo">
            <summary>
            Provides access to partition records in a GUID partition table.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.GuidType">
            <summary>
            Gets the type of the partition, as a GUID.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.BiosType">
            <summary>
            Always returns Zero.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.TypeAsString">
            <summary>
            Gets the type of the partition as a string.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Name">
            <summary>
            Gets the name of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Attributes">
            <summary>
            Gets the attributes of the partition.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionInfo.Identity">
            <summary>
            Gets the unique identity of this specific partition.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionInfo.Open">
            <summary>
            Opens a stream to access the content of the partition.
            </summary>
            <returns>The new stream</returns>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionTable">
            <summary>
            Represents a GUID Partition Table.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the GuidPartitionTable class.
            </summary>
            <param name="disk">The disk containing the partition table</param>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.#ctor(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the GuidPartitionTable class.
            </summary>
            <param name="disk">The stream containing the disk data</param>
            <param name="diskGeometry">The geometry of the disk</param>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.FirstUsableSector">
            <summary>
            Gets the first sector of the disk available to hold partitions.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.LastUsableSector">
            <summary>
            Gets the last sector of the disk available to hold partitions.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.DiskGuid">
            <summary>
            Gets the unique GPT identifier for this disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.GuidPartitionTable.Partitions">
            <summary>
            Gets a collection of the partitions for storing Operating System file-systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(DiscUtils.VirtualDisk)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(System.IO.Stream,DiscUtils.Geometry)">
            <summary>
            Creates a new partition table on a disk.
            </summary>
            <param name="disk">The stream containing the disk data</param>
            <param name="diskGeometry">The geometry of the disk</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Initialize(DiscUtils.VirtualDisk,DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Creates a new partition table on a disk containing a single partition.
            </summary>
            <param name="disk">The disk to initialize.</param>
            <param name="type">The partition type for the single partition</param>
            <returns>An object to access the newly created partition table</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new primary partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the new partition</returns>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in bytes)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in bytes)</param>
            <returns>The index of the new partition</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Create(System.Int64,System.Int64,System.Guid,System.Int64,System.String)">
            <summary>
            Creates a new GUID partition on the disk.
            </summary>
            <param name="startSector">The first sector of the partition.</param>
            <param name="endSector">The last sector of the partition.</param>
            <param name="type">The partition type</param>
            <param name="attributes">The partition attributes</param>
            <param name="name">The name of the partition</param>
            <returns>The index of the new partition</returns>
            <remarks>No checking is performed on the parameters, the caller is
            responsible for ensuring that the partition does not overlap other partitions.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition</param>
        </member>
        <member name="T:DiscUtils.Partitions.GuidPartitionTypes">
            <summary>
            Convenient access to well known GPT partition types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.EfiSystem">
            <summary>
            EFI system partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.BiosBoot">
            <summary>
            BIOS boot partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.MicrosoftReserved">
            <summary>
            Microsoft reserved partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsBasicData">
            <summary>
            Windows basic data partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.LinuxLvm">
            <summary>
            Linux LVM partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.LinuxSwap">
            <summary>
            Linux swap partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsLdmMetadata">
            <summary>
            Windows Logical Disk Manager metadata.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.GuidPartitionTypes.WindowsLdmData">
            <summary>
            Windows Logical Disk Manager data.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.GuidPartitionTypes.Convert(DiscUtils.Partitions.WellKnownPartitionType)">
            <summary>
            Converts a well known partition type to a Guid.
            </summary>
            <param name="wellKnown">The value to convert</param>
            <returns>The GUID value</returns>
        </member>
        <member name="T:DiscUtils.Partitions.PartitionInfo">
            <summary>
            Base class representing a disk partition.
            </summary>
            <remarks>The purpose of this class is to provide a minimal view of a partition,
            such that callers can access existing partitions without specific knowledge of
            the partitioning system.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.FirstSector">
            <summary>
            Gets the first sector of the partion (relative to start of disk) as a Logical Block Address.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.LastSector">
            <summary>
            Gets the last sector of the partion (relative to start of disk) as a Logical Block Address (inclusive).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.SectorCount">
            <summary>
            Gets the length of the partition in sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.GuidType">
            <summary>
            Gets the type of the partition, as a GUID, when available.
            </summary>
            <remarks><see cref="T:System.Guid"/>.Empty for MBR-style partitions</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.BiosType">
            <summary>
            Gets the type of the partition, in legacy BIOS form, when available.
            </summary>
            <remarks>Zero for GUID-style partitions</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.TypeAsString">
            <summary>
            Gets the partition type as a 'friendly' string.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionInfo.VolumeType">
            <summary>
            Gets the physical volume type for this type of partition.
            </summary>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionInfo.Open">
            <summary>
            Opens a stream that accesses the partition's contents.
            </summary>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionInfo.ToString">
            <summary>
            Gets a summary of the partition information as 'first - last (type)'.
            </summary>
            <returns>A string representation of the partition information</returns>
        </member>
        <member name="T:DiscUtils.Partitions.PartitionTable">
            <summary>
            Base class for classes which represent a disk partitioning scheme.
            </summary>
            <remarks>After modifying the table, by creating or deleting a partition assume that any
            previously stored partition indexes of higher value are no longer valid.  Re-enumerate
            the partitions to discover the next index-to-partition mapping.</remarks>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.DiskGuid">
            <summary>
            Gets the GUID that uniquely identifies this disk, if supported (else returns <c>null</c>).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Partitions">
            <summary>
            Gets the list of partitions that contain user data (i.e. non-system / empty).
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Count">
            <summary>
            Gets the number of User partitions on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Partitions.PartitionTable.Item(System.Int32)">
            <summary>
            Gets information about a particular User partition.
            </summary>
            <param name="index">The index of the partition</param>
            <returns>Information about the partition</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.IsPartitioned(System.IO.Stream)">
            <summary>
            Determines if a disk is partitioned with a known partitioning scheme.
            </summary>
            <param name="content">The content of the disk to check</param>
            <returns><c>true</c> if the disk is partitioned, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.IsPartitioned(DiscUtils.VirtualDisk)">
            <summary>
            Determines if a disk is partitioned with a known partitioning scheme.
            </summary>
            <param name="disk">The disk to check</param>
            <returns><c>true</c> if the disk is partitioned, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.GetPartitionTables(DiscUtils.VirtualDisk)">
            <summary>
            Gets all of the partition tables found on a disk.
            </summary>
            <param name="disk">The disk to inspect</param>
            <returns>It is rare for a disk to have multiple partition tables, but theoretically
            possible.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.GetPartitionTables(System.IO.Stream)">
            <summary>
            Gets all of the partition tables found on a disk.
            </summary>
            <param name="contentStream">The content of the disk to inspect</param>
            <returns>It is rare for a disk to have multiple partition tables, but theoretically
            possible.</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Create(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Create(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean)">
            <summary>
            Creates a new partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <returns>The index of the new partition</returns>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.CreateAligned(DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition that encompasses the entire disk.
            </summary>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in byte)</param>
            <returns>The index of the partition</returns>
            <remarks>The partition table must be empty before this method is called,
            otherwise IOException is thrown.</remarks>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.CreateAligned(System.Int64,DiscUtils.Partitions.WellKnownPartitionType,System.Boolean,System.Int32)">
            <summary>
            Creates a new aligned partition with a target size.
            </summary>
            <param name="size">The target size (in bytes)</param>
            <param name="type">The partition type</param>
            <param name="active">Whether the partition is active (bootable)</param>
            <param name="alignment">The alignment (in byte)</param>
            <returns>The index of the new partition</returns>
            <remarks>
            Traditionally partitions were aligned to the physical structure of the underlying disk,
            however with modern storage greater efficiency is acheived by aligning partitions on
            large values that are a power of two.
            </remarks>
        </member>
        <member name="M:DiscUtils.Partitions.PartitionTable.Delete(System.Int32)">
            <summary>
            Deletes a partition at a given index.
            </summary>
            <param name="index">The index of the partition</param>
        </member>
        <member name="T:DiscUtils.Partitions.WellKnownPartitionType">
            <summary>
            Enumeration of partition-table technology neutral partition types.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.WindowsFat">
            <summary>
            Windows FAT-based partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.WindowsNtfs">
            <summary>
            Windows NTFS-based partition.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.Linux">
            <summary>
            Linux native file system.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.LinuxSwap">
            <summary>
            Linux swap.
            </summary>
        </member>
        <member name="F:DiscUtils.Partitions.WellKnownPartitionType.LinuxLvm">
            <summary>
            Linux Logical Volume Manager (LVM).
            </summary>
        </member>
        <member name="T:DiscUtils.PhysicalVolumeType">
            <summary>
            Enumeration of possible types of physical volume.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.None">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.EntireDisk">
            <summary>
            Physical volume encompasses the entire disk.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.BiosPartition">
            <summary>
            Physical volume is defined by a BIOS-style partition table.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.GptPartition">
            <summary>
            Physical volume is defined by a GUID partition table.
            </summary>
        </member>
        <member name="F:DiscUtils.PhysicalVolumeType.ApplePartition">
            <summary>
            Physical volume is defined by an Apple partition map.
            </summary>
        </member>
        <member name="T:DiscUtils.PhysicalVolumeInfo">
            <summary>
            Information about a physical disk volume, which may be a partition or an entire disk.
            </summary>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.#ctor(System.String,DiscUtils.VirtualDisk,DiscUtils.Partitions.PartitionInfo)">
            <summary>
            Initializes a new instance of the PhysicalVolumeInfo class.
            </summary>
            <param name="diskId">The containing disk's identity</param>
            <param name="disk">The disk containing the partition</param>
            <param name="partitionInfo">Information about the partition</param>
            <remarks>Use this constructor to represent a (BIOS or GPT) partition</remarks>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.#ctor(System.String,DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the PhysicalVolumeInfo class.
            </summary>
            <param name="diskId">The identity of the disk</param>
            <param name="disk">The disk itself</param>
            <remarks>Use this constructor to represent an entire disk as a single volume.</remarks>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.VolumeType">
            <summary>
            Gets the type of the volume.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.DiskSignature">
            <summary>
            Gets the signature of the disk containing the volume (only valid for partition-type volumes).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.DiskIdentity">
            <summary>
            Gets the unique identity of the disk containing the volume, if known.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Length">
            <summary>
            Gets the size of the volume, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Identity">
            <summary>
            Gets the stable identity for this physical volume.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be null).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.PartitionIdentity">
            <summary>
            Gets the unique identity of the physical partition, if known.
            </summary>
        </member>
        <member name="P:DiscUtils.PhysicalVolumeInfo.Partition">
            <summary>
            Gets the underlying partition (if any).
            </summary>
        </member>
        <member name="M:DiscUtils.PhysicalVolumeInfo.Open">
            <summary>
            Opens the volume, providing access to its contents.
            </summary>
            <returns>A stream that can be used to access the volume.</returns>
        </member>
        <member name="T:DiscUtils.PumpProgressEventArgs">
            <summary>
            Event arguments indicating progress on pumping a stream.
            </summary>
        </member>
        <member name="P:DiscUtils.PumpProgressEventArgs.BytesRead">
            <summary>
            Gets or sets the number of bytes read from <c>InputStream</c>.
            </summary>
        </member>
        <member name="P:DiscUtils.PumpProgressEventArgs.BytesWritten">
            <summary>
            Gets or sets the number of bytes written to <c>OutputStream</c>.
            </summary>
        </member>
        <member name="P:DiscUtils.PumpProgressEventArgs.SourcePosition">
            <summary>
            Gets or sets the absolute position in <c>InputStream</c>.
            </summary>
        </member>
        <member name="P:DiscUtils.PumpProgressEventArgs.DestinationPosition">
            <summary>
            Gets or sets the absolute position in <c>OutputStream</c>.
            </summary>
        </member>
        <member name="T:DiscUtils.Range`2">
            <summary>
            Represents a range of values.
            </summary>
            <typeparam name="TOffset">The type of the offset element</typeparam>
            <typeparam name="TCount">The type of the size element</typeparam>
        </member>
        <member name="M:DiscUtils.Range`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Range class.
            </summary>
            <param name="offset">The offset (i.e. start) of the range</param>
            <param name="count">The size of the range</param>
        </member>
        <member name="P:DiscUtils.Range`2.Offset">
            <summary>
            Gets the offset (i.e. start) of the range
            </summary>
        </member>
        <member name="P:DiscUtils.Range`2.Count">
            <summary>
            Gets the size of the range.
            </summary>
        </member>
        <member name="M:DiscUtils.Range`2.Chunked``1(System.Collections.Generic.IEnumerable{DiscUtils.Range{``0,``0}},``0)">
            <summary>
            Merges sets of ranges into chunks.
            </summary>
            <param name="ranges">The ranges to merge</param>
            <param name="chunkSize">The size of each chunk</param>
            <returns>Ranges combined into larger chunks</returns>
            <typeparam name="T">The type of the offset and count in the ranges</typeparam>
        </member>
        <member name="M:DiscUtils.Range`2.ToString">
            <summary>
            Returns a string representation of the extent as [start:+length].
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:DiscUtils.Range`2.Equals(DiscUtils.Range{`0,`1})">
            <summary>
            Compares this range to another.
            </summary>
            <param name="other">The range to compare</param>
            <returns><c>true</c> if the ranges are equivalent, else <c>false</c>.</returns>
        </member>
        <member name="T:DiscUtils.Raw.Disk">
            <summary>
            Represents a raw disk image.
            </summary>
            <remarks>This disk format is simply an uncompressed capture of all blocks on a disk</remarks>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.IO.Stream,DiscUtils.Ownership,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
            <param name="geometry">The emulated geometry of the disk.</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="path">The path to the disk image</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="path">The path to the disk image</param>
            <param name="access">The access requested to the disk</param>
        </member>
        <member name="M:DiscUtils.Raw.Disk.#ctor(DiscUtils.Raw.DiskImageFile)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="file">The contents of the disk.</param>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.DiskClass">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Content">
            <summary>
            Gets the content of the disk as a stream.
            </summary>
            <remarks>Note the returned stream is not guaranteed to be at any particular position.  The actual position
            will depend on the last partition table/file system activity, since all access to the disk contents pass
            through a single stream instance.  Set the stream position before accessing the stream.</remarks>
        </member>
        <member name="P:DiscUtils.Raw.Disk.Layers">
            <summary>
            Gets the layers that make up the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.Disk.DiskTypeInfo">
            <summary>
            Gets information about the type of disk.
            </summary>
            <remarks>This property provides access to meta-data about the disk format, for example whether the
            BIOS geometry is preserved in the disk file.</remarks>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Ownership,System.Int64)">
            <summary>
            Initializes a stream as an unformatted disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <returns>An object that accesses the stream as a disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as an unformatted disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <returns>An object that accesses the stream as a disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Initialize(System.IO.Stream,DiscUtils.Ownership,DiscUtils.FloppyDiskType)">
            <summary>
            Initializes a stream as an unformatted floppy disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="type">The type of floppy disk image to create</param>
            <returns>An object that accesses the stream as a disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.CreateDifferencingDisk(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Create a new differencing disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.CreateDifferencingDisk(System.String)">
            <summary>
            Create a new differencing disk.
            </summary>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.Disk.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="T:DiscUtils.Raw.DiskImageFile">
            <summary>
            Represents a single raw disk image file.
            </summary>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret</param>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.#ctor(System.IO.Stream,DiscUtils.Ownership,DiscUtils.Geometry)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
            <param name="geometry">The emulated geometry of the disk.</param>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.Geometry">
            <summary>
            Gets the geometry of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.IsSparse">
            <summary>
            Gets a value indicating if the layer only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.NeedsParent">
            <summary>
            Gets a value indicating whether the file is a differencing disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Raw.DiskImageFile.DiskType">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Initialize(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a raw disk image.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The geometry of the new disk</param>
            <returns>An object that accesses the stream as a raw disk image</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Initialize(System.IO.Stream,DiscUtils.Ownership,DiscUtils.FloppyDiskType)">
            <summary>
            Initializes a stream as an unformatted floppy disk.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="type">The type of floppy disk image to create</param>
            <returns>An object that accesses the stream as a disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.OpenContent(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Gets the content of this layer.
            </summary>
            <param name="parent">The parent stream (if any)</param>
            <param name="ownsParent">Controls ownership of the parent stream</param>
            <returns>The content as a stream</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.GetParentLocations">
            <summary>
            Gets the possible locations of the parent file (if any).
            </summary>
            <returns>Array of strings, empty if no parent</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.DetectGeometry(System.IO.Stream)">
            <summary>
            Calculates the best guess geometry of a disk.
            </summary>
            <param name="disk">The disk to detect the geometry of</param>
            <returns>The geometry of the disk</returns>
        </member>
        <member name="M:DiscUtils.Raw.DiskImageFile.DetectDiskType(System.Int64)">
            <summary>
            Calculates the best guess disk type (i.e. floppy or hard disk)
            </summary>
            <param name="capacity">The capacity of the disk</param>
            <returns>The disk type</returns>
        </member>
        <member name="T:DiscUtils.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_base">
            <summary>
              Ищет локализованную строку, похожую на &lt;value&gt;
             &lt;struct&gt;
               &lt;member&gt;
                 &lt;name&gt;version&lt;/name&gt;
                 &lt;value&gt;
                   &lt;struct&gt;
                     &lt;member&gt;
                       &lt;name&gt;hostname&lt;/name&gt;
                       &lt;value&gt;cheesy-2&lt;/value&gt;
                     &lt;/member&gt;
                     &lt;member&gt;
                       &lt;name&gt;date&lt;/name&gt;
                       &lt;value&gt;2008-11-08&lt;/value&gt;
                     &lt;/member&gt;
                     &lt;member&gt;
                       &lt;name&gt;product_version&lt;/name&gt;
                       &lt;value&gt;1.0.0&lt;/value&gt;
                     &lt;/member&gt;
                     &lt;member&gt;
                       &lt;name&gt;product_brand&lt;/name&gt;
                       &lt;va [остаток строки не уместился]&quot;;.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_ref">
             <summary>
               Ищет локализованную строку, похожую на                               &lt;value&gt;{0}&lt;/value&gt;
            .
             </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_sr">
            <summary>
              Ищет локализованную строку, похожую на             &lt;value&gt;
                         &lt;struct&gt;
                           &lt;member&gt;
                             &lt;name&gt;class&lt;/name&gt;
                             &lt;value&gt;SR&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;id&lt;/name&gt;
                             &lt;value&gt;{0}&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;snapshot&lt;/name&gt;
                             &lt;value&gt;
                               &lt;struct&gt;
                                 &lt;member&gt;
                                   &lt;name&gt;uuid&lt;/name&gt;
                          [остаток строки не уместился]&quot;;.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_vbd">
            <summary>
              Ищет локализованную строку, похожую на             &lt;value&gt;
                         &lt;struct&gt;
                           &lt;member&gt;
                             &lt;name&gt;class&lt;/name&gt;
                             &lt;value&gt;VBD&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;id&lt;/name&gt;
                             &lt;value&gt;{0}&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;snapshot&lt;/name&gt;
                             &lt;value&gt;
                               &lt;struct&gt;
                                 &lt;member&gt;
                                   &lt;name&gt;uuid&lt;/name&gt;
                         [остаток строки не уместился]&quot;;.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_vdi">
            <summary>
              Ищет локализованную строку, похожую на             &lt;value&gt;
                         &lt;struct&gt;
                           &lt;member&gt;
                             &lt;name&gt;class&lt;/name&gt;
                             &lt;value&gt;VDI&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;id&lt;/name&gt;
                             &lt;value&gt;{0}&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;snapshot&lt;/name&gt;
                             &lt;value&gt;
                               &lt;struct&gt;
                                 &lt;member&gt;
                                   &lt;name&gt;uuid&lt;/name&gt;
                         [остаток строки не уместился]&quot;;.
            </summary>
        </member>
        <member name="P:DiscUtils.Resources.XVA_ova_vm">
            <summary>
              Ищет локализованную строку, похожую на             &lt;value&gt;
                         &lt;struct&gt;
                           &lt;member&gt;
                             &lt;name&gt;class&lt;/name&gt;
                             &lt;value&gt;VM&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;id&lt;/name&gt;
                             &lt;value&gt;{0}&lt;/value&gt;
                           &lt;/member&gt;
                           &lt;member&gt;
                             &lt;name&gt;snapshot&lt;/name&gt;
                             &lt;value&gt;
                               &lt;struct&gt;
                                 &lt;member&gt;
                                   &lt;name&gt;uuid&lt;/name&gt;
                          [остаток строки не уместился]&quot;;.
            </summary>
        </member>
        <member name="T:DiscUtils.Sdi.SdiFile">
            <summary>
            Class for accessing the contents of Simple Deployment Image (.sdi) files.
            </summary>
            <remarks>SDI files are primitive disk images, containing multiple blobs.</remarks>
        </member>
        <member name="M:DiscUtils.Sdi.SdiFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SdiFile class.
            </summary>
            <param name="stream">The stream formatted as an SDI file.</param>
        </member>
        <member name="M:DiscUtils.Sdi.SdiFile.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the SdiFile class.
            </summary>
            <param name="stream">The stream formatted as an SDI file.</param>
            <param name="ownership">Whether to pass ownership of <c>stream</c> to the new instance</param>
        </member>
        <member name="P:DiscUtils.Sdi.SdiFile.Sections">
            <summary>
            Gets all of the sections within the file.
            </summary>
        </member>
        <member name="M:DiscUtils.Sdi.SdiFile.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:DiscUtils.Sdi.SdiFile.OpenSection(System.Int32)">
            <summary>
            Opens a stream to access a particular section.
            </summary>
            <param name="index">The zero-based index of the section</param>
            <returns>A stream that can be used to access the section.</returns>
        </member>
        <member name="T:DiscUtils.Sdi.Section">
            <summary>
            Information about a blob (or section) within an SDI file.
            </summary>
        </member>
        <member name="P:DiscUtils.Sdi.Section.Index">
            <summary>
            Gets the zero-based index of this section.
            </summary>
        </member>
        <member name="P:DiscUtils.Sdi.Section.SectionType">
            <summary>
            Gets the type of this section.
            </summary>
            <remarks>Sample types are "PART" (disk partition), "WIM" (Windows Imaging Format)</remarks>
        </member>
        <member name="P:DiscUtils.Sdi.Section.PartitionType">
            <summary>
            Gets the MBR partition type of the partition, for "PART" sections.
            </summary>
        </member>
        <member name="P:DiscUtils.Sdi.Section.Length">
            <summary>
            Gets the length of the section.
            </summary>
        </member>
        <member name="T:DiscUtils.SparseStream">
            <summary>
            Represents a sparse stream.
            </summary>
            <remarks>A sparse stream is a logically contiguous stream where some parts of the stream
            aren't stored.  The unstored parts are implicitly zero-byte ranges.</remarks>
        </member>
        <member name="P:DiscUtils.SparseStream.Extents">
            <summary>
            Gets the parts of the stream that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.FromStream(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Converts any stream into a sparse stream.
            </summary>
            <param name="stream">The stream to convert.</param>
            <param name="takeOwnership"><c>true</c> to have the new stream dispose the wrapped
            stream when it is disposed.</param>
            <returns>A sparse stream</returns>
            <remarks>The returned stream has the entire wrapped stream as a
            single extent.</remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.FromStream(System.IO.Stream,DiscUtils.Ownership,System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent})">
            <summary>
            Converts any stream into a sparse stream.
            </summary>
            <param name="stream">The stream to convert.</param>
            <param name="takeOwnership"><c>true</c> to have the new stream dispose the wrapped
            stream when it is disposed.</param>
            <param name="extents">The set of extents actually stored in <c>stream</c></param>
            <returns>A sparse stream</returns>
            <remarks>The returned stream has the entire wrapped stream as a
            single extent.</remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.Pump(System.IO.Stream,System.IO.Stream)">
            <summary>
            Efficiently pumps data from a sparse stream to another stream.
            </summary>
            <param name="inStream">The sparse stream to pump from.</param>
            <param name="outStream">The stream to pump to.</param>
            <remarks><paramref name="outStream"/> must support seeking.</remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.Pump(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Efficiently pumps data from a sparse stream to another stream.
            </summary>
            <param name="inStream">The stream to pump from.</param>
            <param name="outStream">The stream to pump to.</param>
            <param name="chunkSize">The smallest sequence of zero bytes that will be skipped when writing to <paramref name="outStream"/></param>
            <remarks><paramref name="outStream"/> must support seeking.</remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.ReadOnly(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Wraps a sparse stream in a read-only wrapper, preventing modification.
            </summary>
            <param name="toWrap">The stream to make read-only</param>
            <param name="ownership">Whether to transfer responsibility for calling Dispose on <c>toWrap</c></param>
            <returns>The read-only stream.</returns>
        </member>
        <member name="M:DiscUtils.SparseStream.Clear(System.Int32)">
            <summary>
            Clears bytes from the stream.
            </summary>
            <param name="count">The number of bytes (from the current position) to clear</param>
            <remarks>
            <para>Logically equivalent to writing <c>count</c> null/zero bytes to the stream, some
            implementations determine that some (or all) of the range indicated is not actually
            stored.  There is no direct, automatic, correspondance to clearing bytes and them
            not being represented as an 'extent' - for example, the implementation of the underlying
            stream may not permit fine-grained extent storage.</para>
            <para>It is always safe to call this method to 'zero-out' a section of a stream, regardless of
            the underlying stream implementation.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.SparseStream.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a stream that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="T:DiscUtils.StreamPump">
            <summary>
            Utility class for pumping the contents of one stream into another.
            </summary>
            <remarks>
            This class is aware of sparse streams, and will avoid copying data that is not
            valid in the source stream.  This functionality should normally only be used
            when the destination stream is known not to contain any existing data.
            </remarks>
        </member>
        <member name="M:DiscUtils.StreamPump.#ctor">
            <summary>
            Initializes a new instance of the StreamPump class.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamPump.#ctor(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the StreamPump class.
            </summary>
            <param name="inStream">The stream to read from</param>
            <param name="outStream">The stream to write to</param>
            <param name="sparseChunkSize">The size of each sparse chunk</param>
        </member>
        <member name="E:DiscUtils.StreamPump.ProgressEvent">
            <summary>
            Event raised periodically through the pump operation.
            </summary>
            <remarks>
            This event is signalled synchronously, so to avoid slowing the pumping activity
            implementations should return quickly.
            </remarks>
        </member>
        <member name="P:DiscUtils.StreamPump.InputStream">
            <summary>
            Gets or sets the stream that will be read from.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamPump.OutputStream">
            <summary>
            Gets or sets the stream that will be written to.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamPump.SparseChunkSize">
            <summary>
            Gets or sets, for sparse transfers, the size of each chunk.
            </summary>
            <remarks>
            A chunk is transfered if any byte in the chunk is valid, otherwise it is not.
            This value should normally be set to reflect the underlying storage granularity
            of <c>OutputStream</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.StreamPump.BufferSize">
            <summary>
            Gets or sets the amount of data to read at a time from <c>InputStream</c>.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamPump.SparseCopy">
            <summary>
            Gets or sets a value indicating whether to enable the sparse copy behaviour (default true).
            </summary>
        </member>
        <member name="P:DiscUtils.StreamPump.BytesRead">
            <summary>
            Gets the number of bytes read from <c>InputStream</c>.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamPump.BytesWritten">
            <summary>
            Gets the number of bytes written to <c>OutputStream</c>.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamPump.Run">
            <summary>
            Performs the pump activity, blocking until complete.
            </summary>
        </member>
        <member name="T:DiscUtils.StreamBuffer">
            <summary>
            Converts a Stream into an IBuffer instance.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamBuffer.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the StreamBuffer class.
            </summary>
            <param name="stream">The stream to wrap</param>
            <param name="ownership">Whether to dispose stream, when this object is disposed</param>
        </member>
        <member name="P:DiscUtils.StreamBuffer.CanRead">
            <summary>
            Can this buffer be read.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamBuffer.CanWrite">
            <summary>
            Can this buffer be written.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamBuffer.Capacity">
            <summary>
            Gets the current capacity of the buffer, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.StreamBuffer.Extents">
            <summary>
            Gets the parts of the stream that are stored.
            </summary>
            <remarks>This may be an empty enumeration if all bytes are zero.</remarks>
        </member>
        <member name="M:DiscUtils.StreamBuffer.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamBuffer.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the buffer into a byte array.
            </summary>
            <param name="pos">The offset within the buffer to start reading.</param>
            <param name="buffer">The destination byte array.</param>
            <param name="offset">The start offset within the destination buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The actual number of bytes read</returns>
        </member>
        <member name="M:DiscUtils.StreamBuffer.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array into the buffer.
            </summary>
            <param name="pos">The start offset within the buffer.</param>
            <param name="buffer">The source byte array.</param>
            <param name="offset">The start offset within the source byte array.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:DiscUtils.StreamBuffer.Flush">
            <summary>
            Flushes all data to the underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamBuffer.SetCapacity(System.Int64)">
            <summary>
            Sets the capacity of the buffer, truncating if appropriate.
            </summary>
            <param name="value">The desired capacity of the buffer.</param>
        </member>
        <member name="M:DiscUtils.StreamBuffer.GetExtentsInRange(System.Int64,System.Int64)">
            <summary>
            Gets the parts of a buffer that are stored, within a specified range.
            </summary>
            <param name="start">The offset of the first byte of interest</param>
            <param name="count">The number of bytes of interest</param>
            <returns>An enumeration of stream extents, indicating stored bytes</returns>
        </member>
        <member name="T:DiscUtils.StreamBuilder">
            <summary>
            Base class for objects that can dynamically construct a stream.
            </summary>
        </member>
        <member name="M:DiscUtils.StreamBuilder.Build">
            <summary>
            Builds a new stream.
            </summary>
            <returns>The stream created by the StreamBuilder instance.</returns>
        </member>
        <member name="M:DiscUtils.StreamBuilder.Build(System.IO.Stream)">
            <summary>
            Writes the stream contents to an existing stream.
            </summary>
            <param name="output">The stream to write to.</param>
        </member>
        <member name="M:DiscUtils.StreamBuilder.Build(System.String)">
            <summary>
            Writes the stream contents to a file.
            </summary>
            <param name="outputFile">The file to write to.</param>
        </member>
        <member name="T:DiscUtils.StreamExtent">
            <summary>
            Represents a range of bytes in a stream.
            </summary>
            <remarks>This is normally used to represent regions of a SparseStream that
            are actually stored in the underlying storage medium (rather than implied
            zero bytes).  Extents are stored as a zero-based byte offset (from the
            beginning of the stream), and a byte length</remarks>
        </member>
        <member name="M:DiscUtils.StreamExtent.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the StreamExtent class.
            </summary>
            <param name="start">The start of the extent</param>
            <param name="length">The length of the extent</param>
        </member>
        <member name="P:DiscUtils.StreamExtent.Start">
            <summary>
            Gets the start of the extent (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.StreamExtent.Length">
            <summary>
            Gets the start of the extent (in bytes).
            </summary>
        </member>
        <member name="M:DiscUtils.StreamExtent.Union(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent},DiscUtils.StreamExtent)">
            <summary>
            Calculates the union of a list of extents with another extent.
            </summary>
            <param name="extents">The list of extents</param>
            <param name="other">The other extent</param>
            <returns>The union of the extents.</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.Union(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent}[])">
            <summary>
            Calculates the union of the extents of multiple streams.
            </summary>
            <param name="streams">The stream extents</param>
            <returns>The union of the extents from multiple streams.</returns>
            <remarks>A typical use of this method is to calculate the combined set of
            stored extents from a number of overlayed sparse streams.</remarks>
        </member>
        <member name="M:DiscUtils.StreamExtent.Intersect(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent},DiscUtils.StreamExtent)">
            <summary>
            Calculates the intersection of the extents of a stream with another extent.
            </summary>
            <param name="extents">The stream extents</param>
            <param name="other">The extent to intersect</param>
            <returns>The intersection of the extents.</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.Intersect(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent}[])">
            <summary>
            Calculates the intersection of the extents of multiple streams.
            </summary>
            <param name="streams">The stream extents</param>
            <returns>The intersection of the extents from multiple streams.</returns>
            <remarks>A typical use of this method is to calculate the extents in a
            region of a stream..</remarks>
        </member>
        <member name="M:DiscUtils.StreamExtent.Offset(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent},System.Int64)">
            <summary>
            Offsets the extents of a stream.
            </summary>
            <param name="stream">The stream extents</param>
            <param name="delta">The amount to offset the extents by</param>
            <returns>The stream extents, offset by delta.</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.BlockCount(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent},System.Int64)">
            <summary>
            Returns the number of blocks containing stream data.
            </summary>
            <param name="stream">The stream extents</param>
            <param name="blockSize">The size of each block</param>
            <returns>The number of blocks containing stream data</returns>
            <remarks>This method logically divides the stream into blocks of a specified
            size, then indicates how many of those blocks contain actual stream data.</remarks>
        </member>
        <member name="M:DiscUtils.StreamExtent.Blocks(System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent},System.Int64)">
            <summary>
            Returns all of the blocks containing stream data.
            </summary>
            <param name="stream">The stream extents</param>
            <param name="blockSize">The size of each block</param>
            <returns>Ranges of blocks, as block indexes</returns>
            <remarks>This method logically divides the stream into blocks of a specified
            size, then indicates ranges of blocks that contain stream data.</remarks>
        </member>
        <member name="M:DiscUtils.StreamExtent.op_Equality(DiscUtils.StreamExtent,DiscUtils.StreamExtent)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">The first extent to compare</param>
            <param name="b">The second extent to compare</param>
            <returns>Whether the two extents are equal</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.op_Inequality(DiscUtils.StreamExtent,DiscUtils.StreamExtent)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">The first extent to compare</param>
            <param name="b">The second extent to compare</param>
            <returns>Whether the two extents are different</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.op_LessThan(DiscUtils.StreamExtent,DiscUtils.StreamExtent)">
            <summary>
            The less-than operator.
            </summary>
            <param name="a">The first extent to compare</param>
            <param name="b">The second extent to compare</param>
            <returns>Whether a is less than b</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.op_GreaterThan(DiscUtils.StreamExtent,DiscUtils.StreamExtent)">
            <summary>
            The greater-than operator.
            </summary>
            <param name="a">The first extent to compare</param>
            <param name="b">The second extent to compare</param>
            <returns>Whether a is greather than b</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.Equals(DiscUtils.StreamExtent)">
            <summary>
            Indicates if this StreamExtent is equal to another.
            </summary>
            <param name="other">The extent to compare</param>
            <returns><c>true</c> if the extents are equal, else <c>false</c></returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.ToString">
            <summary>
            Returns a string representation of the extent as [start:+length].
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.Equals(System.Object)">
            <summary>
            Indicates if this stream extent is equal to another object.
            </summary>
            <param name="obj">The object to test</param>
            <returns><c>true</c> if <c>obj</c> is equivalent, else <c>false</c></returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.GetHashCode">
            <summary>
            Gets a hash code for this extent.
            </summary>
            <returns>The extent's hash code.</returns>
        </member>
        <member name="M:DiscUtils.StreamExtent.CompareTo(DiscUtils.StreamExtent)">
            <summary>
            Compares this stream extent to another.
            </summary>
            <param name="other">The extent to compare.</param>
            <returns>Value greater than zero if this extent starts after
            <c>other</c>, zero if they start at the same position, else
            a value less than zero.</returns>
        </member>
        <member name="T:DiscUtils.UnixFileType">
            <summary>
            Standard Unix-style file type.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Fifo">
            <summary>
            A FIFO / Named Pipe.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Character">
            <summary>
            A character device.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Directory">
            <summary>
            A normal directory.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Block">
            <summary>
            A block device.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Regular">
            <summary>
            A regular file.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Link">
            <summary>
            A soft link.
            </summary>
        </member>
        <member name="F:DiscUtils.UnixFileType.Socket">
            <summary>
            A unix socket.
            </summary>
        </member>
        <member name="F:DiscUtils.Utilities.SectorSize">
            <summary>
            The number of bytes in a standard disk sector (512).
            </summary>
        </member>
        <member name="F:DiscUtils.Utilities.UnixEpoch">
            <summary>
            The Epoch common to most (all?) Unix systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Utilities.RoundUp(System.Int64,System.Int64)">
            <summary>
            Round up a value to a multiple of a unit size.
            </summary>
            <param name="value">The value to round up</param>
            <param name="unit">The unit (the returned value will be a multiple of this number)</param>
            <returns>The rounded-up value</returns>
        </member>
        <member name="M:DiscUtils.Utilities.RoundUp(System.Int32,System.Int32)">
            <summary>
            Round up a value to a multiple of a unit size.
            </summary>
            <param name="value">The value to round up</param>
            <param name="unit">The unit (the returned value will be a multiple of this number)</param>
            <returns>The rounded-up value</returns>
        </member>
        <member name="M:DiscUtils.Utilities.RoundDown(System.Int64,System.Int64)">
            <summary>
            Round down a value to a multiple of a unit size.
            </summary>
            <param name="value">The value to round down</param>
            <param name="unit">The unit (the returned value will be a multiple of this number)</param>
            <returns>The rounded-down value</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Ceil(System.Int32,System.Int32)">
            <summary>
            Calculates the CEIL function.
            </summary>
            <param name="numerator">The value to divide</param>
            <param name="denominator">The value to divide by</param>
            <returns>The value of CEIL(numerator/denominator)</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Ceil(System.UInt32,System.UInt32)">
            <summary>
            Calculates the CEIL function.
            </summary>
            <param name="numerator">The value to divide</param>
            <param name="denominator">The value to divide by</param>
            <returns>The value of CEIL(numerator/denominator)</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Ceil(System.Int64,System.Int64)">
            <summary>
            Calculates the CEIL function.
            </summary>
            <param name="numerator">The value to divide</param>
            <param name="denominator">The value to divide by</param>
            <returns>The value of CEIL(numerator/denominator)</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Map``2(System.Collections.Generic.ICollection{``0},DiscUtils.Func{``0,``1})">
            <summary>
            Converts between two arrays.
            </summary>
            <typeparam name="T">The type of the elements of the source array</typeparam>
            <typeparam name="U">The type of the elements of the destination array</typeparam>
            <param name="source">The source array</param>
            <param name="func">The function to map from source type to destination type</param>
            <returns>The resultant array</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Map``2(System.Collections.Generic.IEnumerable{``0},DiscUtils.Func{``0,``1})">
            <summary>
            Converts between two arrays.
            </summary>
            <typeparam name="T">The type of the elements of the source array</typeparam>
            <typeparam name="U">The type of the elements of the destination array</typeparam>
            <param name="source">The source array</param>
            <param name="func">The function to map from source type to destination type</param>
            <returns>The resultant array</returns>
        </member>
        <member name="M:DiscUtils.Utilities.Filter``2(System.Collections.Generic.ICollection{``1},DiscUtils.Func{``1,System.Boolean})">
            <summary>
            Filters a collection into a new collection.
            </summary>
            <typeparam name="C">The type of the new collection</typeparam>
            <typeparam name="T">The type of the collection entries</typeparam>
            <param name="source">The collection to filter</param>
            <param name="predicate">The predicate to select which entries are carried over</param>
            <returns>The new collection, containing all entries where the predicate returns <c>true</c></returns>
        </member>
        <member name="M:DiscUtils.Utilities.RangesOverlap``1(``0,``0,``0,``0)">
            <summary>
            Indicates if two ranges overlap.
            </summary>
            <typeparam name="T">The type of the ordinals</typeparam>
            <param name="xFirst">The lowest ordinal of the first range (inclusive)</param>
            <param name="xLast">The highest ordinal of the first range (exclusive)</param>
            <param name="yFirst">The lowest ordinal of the second range (inclusive)</param>
            <param name="yLast">The highest ordinal of the second range (exclusive)</param>
            <returns><c>true</c> if the ranges overlap, else <c>false</c></returns>
        </member>
        <member name="M:DiscUtils.Utilities.StringToBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Primitive conversion from Unicode to ASCII that preserves special characters.
            </summary>
            <param name="value">The string to convert</param>
            <param name="dest">The buffer to fill</param>
            <param name="offset">The start of the string in the buffer</param>
            <param name="count">The number of characters to convert</param>
            <remarks>The built-in ASCIIEncoding converts characters of codepoint > 127 to ?,
            this preserves those code points by removing the top 16 bits of each character.</remarks>
        </member>
        <member name="M:DiscUtils.Utilities.BytesToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Primitive conversion from ASCII to Unicode that preserves special characters.
            </summary>
            <param name="data">The data to convert</param>
            <param name="offset">The first byte to convert</param>
            <param name="count">The number of bytes to convert</param>
            <returns>The string</returns>
            <remarks>The built-in ASCIIEncoding converts characters of codepoint > 127 to ?,
            this preserves those code points.</remarks>
        </member>
        <member name="M:DiscUtils.Utilities.BytesToZString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Primitive conversion from ASCII to Unicode that stops at a null-terminator.
            </summary>
            <param name="data">The data to convert</param>
            <param name="offset">The first byte to convert</param>
            <param name="count">The number of bytes to convert</param>
            <returns>The string</returns>
            <remarks>The built-in ASCIIEncoding converts characters of codepoint > 127 to ?,
            this preserves those code points.</remarks>
        </member>
        <member name="M:DiscUtils.Utilities.GetDirectoryFromPath(System.String)">
            <summary>
            Extracts the directory part of a path.
            </summary>
            <param name="path">The path to process</param>
            <returns>The directory part</returns>
        </member>
        <member name="M:DiscUtils.Utilities.GetFileFromPath(System.String)">
            <summary>
            Extracts the file part of a path.
            </summary>
            <param name="path">The path to process</param>
            <returns>The file part of the path</returns>
        </member>
        <member name="M:DiscUtils.Utilities.CombinePaths(System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="a">The first part of the path</param>
            <param name="b">The second part of the path</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ResolveRelativePath(System.String,System.String)">
            <summary>
            Resolves a relative path into an absolute one.
            </summary>
            <param name="basePath">The base path to resolve from</param>
            <param name="relativePath">The relative path</param>
            <returns>The absolute path, so far as it can be resolved.  If the
            <paramref name="relativePath"/> contains more '..' characters than the
            base path contains levels of directory, the resultant string will be relative.
            For example: (TEMP\Foo.txt, ..\..\Bar.txt) gives (..\Bar.txt).</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes until buffer filled or EOF.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="buffer">The buffer to populate</param>
            <param name="offset">Offset in the buffer to start</param>
            <param name="length">The number of bytes to read</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Read bytes until buffer filled or throw IOException.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="count">The number of bytes to read</param>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadFully(DiscUtils.IBuffer,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes until buffer filled or EOF.
            </summary>
            <param name="buffer">The stream to read</param>
            <param name="pos">The position in buffer to read from</param>
            <param name="data">The buffer to populate</param>
            <param name="offset">Offset in the buffer to start</param>
            <param name="length">The number of bytes to read</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadFully(DiscUtils.IBuffer,System.Int64,System.Int32)">
            <summary>
            Read bytes until buffer filled or throw IOException.
            </summary>
            <param name="buffer">The buffer to read</param>
            <param name="pos">The position in buffer to read from</param>
            <param name="count">The number of bytes to read</param>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadAll(DiscUtils.IBuffer)">
            <summary>
            Read bytes until buffer filled or throw IOException.
            </summary>
            <param name="buffer">The buffer to read</param>
            <returns>The data read from the stream</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ReadSector(System.IO.Stream)">
            <summary>
            Reads a disk sector (512 bytes).
            </summary>
            <param name="stream">The stream to read</param>
            <returns>The sector data as a byte array</returns>
        </member>
        <member name="M:DiscUtils.Utilities.PumpStreams(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the contents of one stream to another.
            </summary>
            <param name="source">The stream to copy from</param>
            <param name="dest">The destination stream</param>
            <remarks>Copying starts at the current stream positions</remarks>
        </member>
        <member name="M:DiscUtils.Utilities.Is8Dot3(System.String)">
            <summary>
            Indicates if a file name matches the 8.3 pattern.
            </summary>
            <param name="name">The name to test</param>
            <returns><c>true</c> if the name is 8.3, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Utilities.ConvertWildcardsToRegEx(System.String)">
            <summary>
            Converts a 'standard' wildcard file/path specification into a regular expression.
            </summary>
            <param name="pattern">The wildcard pattern to convert</param>
            <returns>The resultant regular expression</returns>
            <remarks>
            The wildcard * (star) matches zero or more characters (including '.'), and ?
            (question mark) matches precisely one character (except '.').
            </remarks>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsDirectory`2">
            <summary>
            Interface implemented by classes representing a directory.
            </summary>
            <typeparam name="TDirEntry">Concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">Concrete type representing files.</typeparam>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsDirectory`2.AllEntries">
            <summary>
            Gets all of the directory entries.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsDirectory`2.Self">
            <summary>
            Gets a self-reference, if available.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsDirectory`2.GetEntryByName(System.String)">
            <summary>
            Gets a specific directory entry, by name.
            </summary>
            <param name="name">The name of the directory entry</param>
            <returns>The directory entry, or <c>null</c> if not found</returns>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsDirectory`2.CreateNewFile(System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="name">The name of the file (relative to this directory)</param>
            <returns>The newly created file</returns>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsFile">
            <summary>
            Interface implemented by a class representing a file.
            </summary>
            <remarks>
            File system implementations should have a class that implements this
            interface.  If the file system implementation is read-only, it is
            acceptable to throw <c>NotImplementedException</c> from setters.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.LastAccessTimeUtc">
            <summary>
            Gets or sets the last access time in UTC.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.LastWriteTimeUtc">
            <summary>
            Gets or sets the last write time in UTC.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.CreationTimeUtc">
            <summary>
            Gets or sets the last creation time in UTC.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileAttributes">
            <summary>
            Gets or sets the file's attributes.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileLength">
            <summary>
            Gets the length of the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsFile.FileContent">
            <summary>
            Gets a buffer to access the file's contents.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsFileWithStreams">
            <summary>
            Interface implemented by classes representing files, in file systems that support multi-stream files.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsFileWithStreams.CreateStream(System.String)">
            <summary>
            Creates a new stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>An object representing the stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.IVfsFileWithStreams.OpenExistingStream(System.String)">
            <summary>
            Opens an existing stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <returns>An object representing the stream.</returns>
            <remarks>The implementation must not implicitly create the stream if it doesn't already
            exist.</remarks>
        </member>
        <member name="T:DiscUtils.Vfs.IVfsSymlink`2">
            <summary>
            Interface implemented by classes representing a directory.
            </summary>
            <typeparam name="TDirEntry">Concrete type representing directory entries.</typeparam>
            <typeparam name="TFile">Concrete type representing files.</typeparam>
        </member>
        <member name="P:DiscUtils.Vfs.IVfsSymlink`2.TargetPath">
            <summary>
            Gets the target path for this symlink.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsContext">
            <summary>
            Base class for a context object that holds global state for file system implementations.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsDirEntry">
            <summary>
            Base class for directory entries in a file system.
            </summary>
            <remarks>
            File system implementations should have a class that derives from
            this abstract class.  If the file system implementation is read-only,
            it is acceptable to throw <c>NotImplementedException</c> from methods
            that attempt to modify the file system.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.IsDirectory">
            <summary>
            Gets a value indicating whether this directory entry represents a directory (rather than a file).
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.IsSymlink">
            <summary>
            Gets a value indicating whether this directory entry represents a symlink (rather than a file or directory).
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.FileName">
            <summary>
            Gets the name of this directory entry.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.HasVfsTimeInfo">
            <summary>
            Gets a value indicating whether this directory entry contains time information.
            </summary>
            <remarks>
            <para>Typically either always returns <c>true</c> or <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.LastAccessTimeUtc">
            <summary>
            Gets the last access time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.LastWriteTimeUtc">
            <summary>
            Gets the last write time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.CreationTimeUtc">
            <summary>
            Gets the creation time of the file or directory.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsTimeInfo</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.HasVfsFileAttributes">
            <summary>
            Gets a value indicating whether this directory entry contains file attribute information.
            </summary>
            <remarks>
            <para>Typically either always returns <c>true</c> or <c>false</c>.</para>
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.FileAttributes">
            <summary>
            Gets the file attributes from the directory entry.
            </summary>
            <remarks>
            May throw <c>NotSupportedException</c> if <c>HasVfsFileAttributes</c> is <c>false</c>.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.UniqueCacheId">
            <summary>
            Gets a unique id for the file or directory represented by this directory entry.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsDirEntry.SearchName">
            <summary>
            Gets a version of FileName that can be used in wildcard matches.
            </summary>
            <remarks>
            The returned name, must have an extension separator '.', and not have any optional version
            information found in some files.  The returned name is matched against a wildcard patterns
            such as "*.*".
            </remarks>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystem`4">
            <summary>
            Base class for VFS file systems.
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries</typeparam>
            <typeparam name="TFile">The concrete type representing files</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories</typeparam>
            <typeparam name="TContext">The concrete type holding global state</typeparam>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the VfsFileSystem class.
            </summary>
            <param name="defaultOptions">The default file system options</param>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystem`4.DirEntryHandler">
            <summary>
            Delegate for processing directory entries.
            </summary>
            <param name="path">Full path to the directory entry</param>
            <param name="dirEntry">The directory entry itself</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.Context">
            <summary>
            Gets or sets the global shared state.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystem`4.RootDirectory">
            <summary>
            Gets or sets the object representing the root directory.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file - not supported on read-only file systems.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.CreateDirectory(System.String)">
            <summary>
            Creates a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the new directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DeleteFile(System.String)">
            <summary>
            Deletes a file - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the directory exists</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Overwrite any existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect</param>
            <returns>The attributes of the file or directory</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.ForAllDirEntries(System.String,DiscUtils.Vfs.VfsFileSystem{`0,`1,`2,`3}.DirEntryHandler)">
            <summary>
            Gets all directory entries in the specified directory and sub-directories.
            </summary>
            <param name="path">The path to inspect</param>
            <param name="handler">Delegate invoked for each directory entry</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.GetFile(System.String)">
            <summary>
            Gets the file object for a given path.
            </summary>
            <param name="path">The path to query.</param>
            <returns>The file object corresponding to the path</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.ConvertDirEntryToFile(`0)">
            <summary>
            Converts a directory entry to an object representing a file.
            </summary>
            <param name="dirEntry">The directory entry to convert</param>
            <returns>The corresponding file object</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystem`4.FormatFileName(System.String)">
            <summary>
            Converts an internal directory entry name into an external one.
            </summary>
            <param name="name">The name to convert</param>
            <returns>The external name</returns>
            <remarks>
            This method is called on a single path element (i.e. name contains no path
            separators).
            </remarks>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFacade">
            <summary>
            Base class for the public facade on a file system.
            </summary>
            <remarks>
            The derived class can extend the functionality available from a file system
            beyond that defined by DiscFileSystem.
            </remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.#ctor(DiscUtils.DiscFileSystem)">
            <summary>
            Initializes a new instance of the VfsFileSystemFacade class.
            </summary>
            <param name="toWrap">The actual file system instance</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.Options">
            <summary>
            Gets the file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.FriendlyName">
            <summary>
            Gets a friendly name for the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>true if the file system is read-write.</returns>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.Root">
            <summary>
            Gets the root directory of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemFacade.IsThreadSafe">
            <summary>
            Gets a value indicating whether the file system is thread-safe.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Overwrite any existing file</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The path of the new directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
            <param name="recursive">Determines if the all descendants should be deleted</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the directory exists</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test</param>
            <returns>true if the file or directory exists</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String,System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <param name="access">The access permissions for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect</param>
            <returns>The attributes of the file or directory</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last access time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory</param>
            <returns>The last write time</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file</param>
            <returns>The length in bytes</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileInfo(System.String)">
            <summary>
            Gets an object representing a possible file.
            </summary>
            <param name="path">The file path</param>
            <returns>The representing object</returns>
            <remarks>The file does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetDirectoryInfo(System.String)">
            <summary>
            Gets an object representing a possible directory.
            </summary>
            <param name="path">The directory path</param>
            <returns>The representing object</returns>
            <remarks>The directory does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetFileSystemInfo(System.String)">
            <summary>
            Gets an object representing a possible file system object (file or directory).
            </summary>
            <param name="path">The file system path</param>
            <returns>The representing object</returns>
            <remarks>The file system object does not need to exist</remarks>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetRealFileSystem``4">
            <summary>
            Provides access to the actual file system implementation
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries</typeparam>
            <typeparam name="TFile">The concrete type representing files</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories</typeparam>
            <typeparam name="TContext">The concrete type holding global state</typeparam>
            <returns>The actual file system instance.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFacade.GetRealFileSystem``1">
            <summary>
            Provides access to the actual file system implementation
            </summary>
            <typeparam name="T">The concrete type of the actual file system.</typeparam>
            <returns>The actual file system instance.</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFactory">
            <summary>
            Base class for logic to detect file systems.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(System.IO.Stream)">
            <summary>
            Detects if a stream contains any known file systems.
            </summary>
            <param name="stream">The stream to inspect</param>
            <returns>A list of file systems (may be empty)</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(DiscUtils.VolumeInfo)">
            <summary>
            Detects if a volume contains any known file systems.
            </summary>
            <param name="volume">The volume to inspect</param>
            <returns>A list of file systems (may be empty)</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemFactory.Detect(System.IO.Stream,DiscUtils.VolumeInfo)">
            <summary>
            The logic for detecting file systems.
            </summary>
            <param name="stream">The stream to inspect.</param>
            <param name="volumeInfo">Optionally, information about the volume</param>
            <returns>A list of file systems detected (may be empty)</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemFactoryAttribute">
            <summary>
            Attribute identifying file system factory classes.
            </summary>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemOpener">
            <summary>
            Delegate for instantiating a file system.
            </summary>
            <param name="stream">The stream containing the file system</param>
            <param name="volumeInfo">Optional, information about the volume the file system is on</param>
            <param name="parameters">Parameters for the file system</param>
            <returns>A file system implementation</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsFileSystemInfo">
            <summary>
            Class holding information about a file system.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.#ctor(System.String,System.String,DiscUtils.Vfs.VfsFileSystemOpener)">
            <summary>
            Initializes a new instance of the VfsFileSystemInfo class.
            </summary>
            <param name="name">The name of the file system</param>
            <param name="description">A one-line description of the file system</param>
            <param name="openDelegate">A delegate that can open streams as the indicated file system</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemInfo.Name">
            <summary>
            Gets the name of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Vfs.VfsFileSystemInfo.Description">
            <summary>
            Gets a one-line description of the file system.
            </summary>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.Open(DiscUtils.VolumeInfo,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a volume using the file system.
            </summary>
            <param name="volume">The volume to access</param>
            <param name="parameters">Parameters for the file system</param>
            <returns>A file system instance</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsFileSystemInfo.Open(System.IO.Stream,DiscUtils.FileSystemParameters)">
            <summary>
            Opens a stream using the file system.
            </summary>
            <param name="stream">The stream to access</param>
            <param name="parameters">Parameters for the file system</param>
            <returns>A file system instance</returns>
        </member>
        <member name="T:DiscUtils.Vfs.VfsReadOnlyFileSystem`4">
            <summary>
            Base class for read-only file system implementations.
            </summary>
            <typeparam name="TDirEntry">The concrete type representing directory entries</typeparam>
            <typeparam name="TFile">The concrete type representing files</typeparam>
            <typeparam name="TDirectory">The concrete type representing directories</typeparam>
            <typeparam name="TContext">The concrete type holding global state</typeparam>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.#ctor(DiscUtils.DiscFileSystemOptions)">
            <summary>
            Initializes a new instance of the VfsReadOnlyFileSystem class.
            </summary>
            <param name="defaultOptions">The default file system options</param>
        </member>
        <member name="P:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CanWrite">
            <summary>
            Indicates whether the file system is read-only or read-write.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file - not supported on read-only file systems.
            </summary>
            <param name="sourceFile">The source file</param>
            <param name="destinationFile">The destination file</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.CreateDirectory(System.String)">
            <summary>
            Creates a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the new directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.DeleteFile(System.String)">
            <summary>
            Deletes a file - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory - not supported on read-only file systems.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file - not supported on read-only file systems.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to allow an existing file to be overwritten</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified file.
            </summary>
            <param name="path">The full path of the file to open.</param>
            <param name="mode">The file mode for the created stream.</param>
            <returns>The new stream.</returns>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The file or directory to change</param>
            <param name="newValue">The new attributes of the file or directory</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Vfs.VfsReadOnlyFileSystem`4.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory - not supported on read-only file systems.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="T:DiscUtils.Vhd.Disk">
            <summary>
            Represents a VHD-backed disk.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.Disk._files">
            <summary>
            The list of files that make up the disk.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.Disk._content">
            <summary>
            The stream representing the disk's contents.
            </summary>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are not supported.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="path">The path to the disk image</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="path">The path to the disk image</param>
            <param name="access">The access requested to the disk</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(DiscUtils.DiscFileSystem,System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="fileSystem">The file system containing the disk.</param>
            <param name="path">The file system relative path to the disk.</param>
            <param name="access">The access requested to the disk.</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(System.Collections.Generic.IList{DiscUtils.Vhd.DiskImageFile},DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.
            </summary>
            <param name="files">The set of image files</param>
            <param name="ownsFiles">Indicates if the new instance controls the lifetime of the image files</param>
            <remarks>The disks shound be ordered with the first file referencing the second, etc.  The final
            file must not require any parent.</remarks>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(DiscUtils.FileLocator,System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="locator">The locator to access relative files</param>
            <param name="path">The path to the disk image</param>
            <param name="access">The access requested to the disk</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(DiscUtils.Vhd.DiskImageFile,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are not supported.
            </summary>
            <param name="file">The file containing the disk</param>
            <param name="ownsFile">Indicates if the new instance should control the lifetime of the file.</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(DiscUtils.Vhd.DiskImageFile,DiscUtils.Ownership,DiscUtils.FileLocator,System.String)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="file">The file containing the disk</param>
            <param name="ownsFile">Indicates if the new instance should control the lifetime of the file.</param>
            <param name="parentLocator">Object used to locate the parent disk</param>
            <param name="parentPath">Path to the parent disk (if required)</param>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.#ctor(DiscUtils.Vhd.DiskImageFile,DiscUtils.Ownership,DiscUtils.Vhd.DiskImageFile,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the Disk class.  Differencing disks are supported.
            </summary>
            <param name="file">The file containing the disk</param>
            <param name="ownsFile">Indicates if the new instance should control the lifetime of the file.</param>
            <param name="parentFile">The file containing the disk's parent</param>
            <param name="ownsParent">Indicates if the new instance should control the lifetime of the parentFile</param>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.DiskClass">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.AutoCommitFooter">
            <summary>
            Gets or sets a value indicating whether the VHD footer is written every time a new block is allocated.
            </summary>
            <remarks>
            This is enabled by default, disabling this can make write activity faster - however,
            some software may be unable to access the VHD file if Dispose is not called on this class.
            </remarks>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.Content">
            <summary>
            Gets the content of the disk as a stream.
            </summary>
            <remarks>Note the returned stream is not guaranteed to be at any particular position.  The actual position
            will depend on the last partition table/file system activity, since all access to the disk contents pass
            through a single stream instance.  Set the stream position before accessing the stream.</remarks>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.Layers">
            <summary>
            Gets the layers that make up the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.Disk.DiskTypeInfo">
            <summary>
            Gets information about the type of disk.
            </summary>
            <remarks>This property provides access to meta-data about the disk format, for example whether the
            BIOS geometry is preserved in the disk file.</remarks>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeFixed(System.IO.Stream,DiscUtils.Ownership,System.Int64)">
            <summary>
            Initializes a stream as a fixed-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeFixed(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a fixed-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64,System.Int64)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="blockSize">The size of each block (unit of allocation)</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeDifferencing(System.String,System.String)">
            <summary>
            Creates a new VHD differencing disk file.
            </summary>
            <param name="path">The path to the new disk file</param>
            <param name="parentPath">The path to the parent disk file</param>
            <returns>An object that accesses the new file as a Disk</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.InitializeDifferencing(System.IO.Stream,DiscUtils.Ownership,DiscUtils.Vhd.DiskImageFile,DiscUtils.Ownership,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a stream as a differencing disk VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the <paramref name="stream"/>.</param>
            <param name="parent">The disk this file is a different from.</param>
            <param name="ownsParent">Indicates if the new instance controls the lifetime of the <paramref name="parent"/> file.</param>
            <param name="parentAbsolutePath">The full path to the parent disk.</param>
            <param name="parentRelativePath">The relative path from the new disk to the parent disk.</param>
            <param name="parentModificationTime">The time the parent disk's file was last modified (from file system).</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.CreateDifferencingDisk(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Create a new differencing disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.CreateDifferencingDisk(System.String)">
            <summary>
            Create a new differencing disk.
            </summary>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.Vhd.Disk.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="T:DiscUtils.Vhd.DiskBuilder">
            <summary>
            Creates new VHD disks by wrapping existing streams.
            </summary>
            <remarks>Using this method for creating virtual disks avoids consuming
            large amounts of memory, or going via the local file system when the aim
            is simply to present a VHD version of an existing disk.</remarks>
        </member>
        <member name="P:DiscUtils.Vhd.DiskBuilder.DiskType">
            <summary>
            Gets or sets the type of VHD file to build.
            </summary>
        </member>
        <member name="M:DiscUtils.Vhd.DiskBuilder.Build(System.String)">
            <summary>
            Initiates the build process.
            </summary>
            <param name="baseName">The base name for the VMDK, for example 'foo' to create 'foo.vhd'.</param>
            <returns>A set of one or more logical files that constitute the VHD.  The first file is
            the 'primary' file that is normally attached to VMs.</returns>
        </member>
        <member name="T:DiscUtils.Vhd.DiskImageFile">
            <summary>
            Represents a single .VHD file.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._fileStream">
            <summary>
            The stream containing the VHD file.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._footer">
            <summary>
            The VHD file's footer.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._dynamicHeader">
            <summary>
            The VHD file's dynamic header (if not static)
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._ownsStream">
            <summary>
            Indicates if this object controls the lifetime of the stream.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._fileLocator">
            <summary>
            The object that can be used to locate relative file paths.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.DiskImageFile._fileName">
            <summary>
            The file name of this VHD.
            </summary>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret</param>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.#ctor(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="stream">The stream to interpret</param>
            <param name="ownsStream">Indicates if the new instance should control the lifetime of the stream.</param>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the DiskImageFile class.
            </summary>
            <param name="path">The file path to open</param>
            <param name="access">Controls how the file can be accessed</param>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.ParentUniqueId">
            <summary>
            Gets the unique id of the parent disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.Geometry">
            <summary>
            Gets the geometry of the virtual disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.IsSparse">
            <summary>
            Gets a value indicating if the layer only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.FullPath">
            <summary>
            Gets the full path to this disk layer, or empty string.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.Information">
            <summary>
            Gets detailed information about the VHD file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.NeedsParent">
            <summary>
            Gets a value indicating whether the file is a differencing disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.UniqueId">
            <summary>
            Gets the unique id of this file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.CreationTimestamp">
            <summary>
            Gets the timestamp for this file (when it was created).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFile.Extents">
            <summary>
            Gets the extent that comprises this file.
            </summary>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeFixed(System.IO.Stream,DiscUtils.Ownership,System.Int64)">
            <summary>
            Initializes a stream as a fixed-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeFixed(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a fixed-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64,System.Int64)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="blockSize">The size of each block (unit of allocation)</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeDynamic(System.IO.Stream,DiscUtils.Ownership,System.Int64,DiscUtils.Geometry,System.Int64)">
            <summary>
            Initializes a stream as a dynamically-sized VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="capacity">The desired capacity of the new disk</param>
            <param name="geometry">The desired geometry of the new disk, or <c>null</c> for default</param>
            <param name="blockSize">The size of each block (unit of allocation)</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.InitializeDifferencing(System.IO.Stream,DiscUtils.Ownership,DiscUtils.Vhd.DiskImageFile,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a stream as a differencing disk VHD file.
            </summary>
            <param name="stream">The stream to initialize.</param>
            <param name="ownsStream">Indicates if the new instance controls the lifetime of the stream.</param>
            <param name="parent">The disk this file is a different from.</param>
            <param name="parentAbsolutePath">The full path to the parent disk.</param>
            <param name="parentRelativePath">The relative path from the new disk to the parent disk.</param>
            <param name="parentModificationTimeUtc">The time the parent disk's file was last modified (from file system).</param>
            <returns>An object that accesses the stream as a VHD file</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.OpenContent(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Opens the content of the disk image file as a stream.
            </summary>
            <param name="parent">The parent file's content (if any)</param>
            <param name="ownsParent">Whether the created stream assumes ownership of parent stream</param>
            <returns>The new content stream</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.GetParentLocations">
            <summary>
            Gets the location of the parent file, given a base path.
            </summary>
            <returns>Array of candidate file locations</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.GetParentLocations(System.String)">
            <summary>
            Gets the location of the parent file, given a base path.
            </summary>
            <param name="basePath">The full path to this file</param>
            <returns>Array of candidate file locations</returns>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing">Set to <c>true</c> if called within Dispose(),
            else <c>false</c>.</param>
        </member>
        <member name="M:DiscUtils.Vhd.DiskImageFile.GetParentLocations(DiscUtils.FileLocator)">
            <summary>
            Gets the locations of the parent file.
            </summary>
            <param name="fileLocator">The file locator to use</param>
            <returns>Array of candidate file locations</returns>
        </member>
        <member name="T:DiscUtils.Vhd.DiskImageFileInfo">
            <summary>
            Provides read access to detailed information about a VHD file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.Cookie">
            <summary>
            Gets the cookie indicating this is a VHD file (should be "conectix").
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.Features">
            <summary>
            Gets the Features bit field.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.FileFormatVersion">
            <summary>
            Gets the file format version packed as an integer.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.CreationTimestamp">
            <summary>
            Gets the time the file was created (note: this is not the modification time).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.CreatorApp">
            <summary>
            Gets the application used to create the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.CreatorVersion">
            <summary>
            Gets the version of the application used to create the file, packed as an integer.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.CreatorHostOS">
            <summary>
            Gets the host operating system of the application used to create the file.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.OriginalSize">
            <summary>
            Gets the original size of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.CurrentSize">
            <summary>
            Gets the current size of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DiskType">
            <summary>
            Gets the type of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.FooterChecksum">
            <summary>
            Gets the checksum of the file's 'footer'.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.UniqueId">
            <summary>
            Gets the unique identity of this disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.SavedState">
            <summary>
            Gets a flag indicating if the disk has associated saved VM memory state.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicCookie">
            <summary>
            Gets the cookie indicating a dynamic disk header (should be "cxsparse").
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicHeaderVersion">
            <summary>
            Gets the version of the dynamic header structure, packed as an integer.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicBlockCount">
            <summary>
            Gets the number of sparse blocks the file is divided into.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicBlockSize">
            <summary>
            Gets the size of a sparse allocation block, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicChecksum">
            <summary>
            Gets the checksum value of the dynamic header structure.
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicParentUniqueId">
            <summary>
            Gets the unique id of the parent file (for differencing disks).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicParentTimestamp">
            <summary>
            Gets the modification timestamp of the parent file (for differencing disks).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicParentUnicodeName">
            <summary>
            Gets the unicode name of the parent file (for differencing disks).
            </summary>
        </member>
        <member name="P:DiscUtils.Vhd.DiskImageFileInfo.DynamicParentLocators">
            <summary>
            Gets the stored paths to the parent file (for differencing disks).
            </summary>
        </member>
        <member name="T:DiscUtils.Vhd.FileType">
            <summary>
            The known types of VHD disks.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.FileType.None">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.FileType.Fixed">
            <summary>
            Fixed-size disk, with space allocated up-front.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.FileType.Dynamic">
            <summary>
            Dynamic disk, allocates space as needed.
            </summary>
        </member>
        <member name="F:DiscUtils.Vhd.FileType.Differencing">
            <summary>
            Differencing disk, form of dynamic disk that stores changes relative to another disk.
            </summary>
        </member>
        <member name="T:DiscUtils.VirtualDisk">
            <summary>
            Base class representing virtual hard disks.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Finalize">
            <summary>
            Finalizes an instance of the VirtualDisk class.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.SupportedDiskFormats">
            <summary>
            Gets the set of disk formats supported as an array of file extensions.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.SupportedDiskTypes">
            <summary>
            Gets the set of disk types supported, as an array of identifiers.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Geometry">
            <summary>
            Gets the geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.BiosGeometry">
            <summary>
            Gets the geometry of the disk as it is anticipated a hypervisor BIOS will represent it.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.DiskClass">
            <summary>
            Gets the type of disk represented by this object.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.BlockSize">
            <summary>
            Gets the size of the disk's logical blocks (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Content">
            <summary>
            Gets the content of the disk as a stream.
            </summary>
            <remarks>Note the returned stream is not guaranteed to be at any particular position.  The actual position
            will depend on the last partition table/file system activity, since all access to the disk contents pass
            through a single stream instance.  Set the stream position before accessing the stream.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Layers">
            <summary>
            Gets the layers that make up the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Signature">
            <summary>
            Gets or sets the Windows disk signature of the disk, which uniquely identifies the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDisk.IsPartitioned">
            <summary>
            Gets a value indicating whether the disk appears to have a valid partition table.
            </summary>
            <remarks>There is no reliable way to determine whether a disk has a valid partition
            table.  The 'guess' consists of checking for basic indicators and looking for obviously
            invalid data, such as overlapping partitions.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Partitions">
            <summary>
            Gets the object that interprets the partition structure.
            </summary>
            <remarks>It is theoretically possible for a disk to contain two independant partition structures - a
            BIOS/GPT one and an Apple one, for example.  This method will return in order of preference,
            a GUID partition table, a BIOS partition table, then in undefined preference one of any other partition
            tables found.  See PartitionTable.GetPartitionTables to gain access to all the discovered partition
            tables on a disk.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.Parameters">
            <summary>
            Gets the parameters of the disk.
            </summary>
            <remarks>Most of the parameters are also available individually, such as DiskType and Capacity.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDisk.DiskTypeInfo">
            <summary>
            Gets information about the type of disk.
            </summary>
            <remarks>This property provides access to meta-data about the disk format, for example whether the
            BIOS geometry is preserved in the disk file.</remarks>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)">
            <summary>
            Gets the set of supported variants of a type of virtual disk.
            </summary>
            <param name="type">A type, as returned by <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/></param>
            <returns>A collection of identifiers, or empty if there is no variant concept for this type of disk.</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetDiskType(System.String,System.String)">
            <summary>
            Gets information about disk type.
            </summary>
            <param name="type">The disk type, as returned by <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/></param>
            <param name="variant">The variant of the disk type</param>
            <returns>Information about the disk type</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(DiscUtils.DiscFileSystem,System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on</param>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>)</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>)</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <param name="capacity">The capacity of the new disk</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD)</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>)</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>)</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <param name="capacity">The capacity of the new disk</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD)</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,System.Int64,DiscUtils.Geometry,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>)</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>)</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <param name="capacity">The capacity of the new disk</param>
            <param name="geometry">The geometry of the new disk (or null).</param>
            <param name="user">The user identity to use when accessing the <c>path</c> (or null)</param>
            <param name="password">The password to use when accessing the <c>path</c> (or null)</param>
            <param name="parameters">Untyped parameters controlling the creation process (TBD)</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDisk(System.String,System.String,System.String,DiscUtils.VirtualDiskParameters,System.String,System.String)">
            <summary>
            Create a new virtual disk.
            </summary>
            <param name="type">The type of disk to create (see <see cref="P:DiscUtils.VirtualDisk.SupportedDiskTypes"/>)</param>
            <param name="variant">The variant of the type to create (see <see cref="M:DiscUtils.VirtualDisk.GetSupportedDiskVariants(System.String)"/>)</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <param name="diskParameters">Parameters controlling the capacity, geometry, etc of the new disk.</param>
            <param name="user">The user identity to use when accessing the <c>path</c> (or null)</param>
            <param name="password">The password to use when accessing the <c>path</c> (or null)</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.IO.FileAccess)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI</param>
            <param name="access">The desired access to the disk</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.IO.FileAccess,System.String,System.String)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI</param>
            <param name="access">The desired access to the disk</param>
            <param name="user">The user name to use for authentication (if necessary)</param>
            <param name="password">The password to use for authentication (if necessary)</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(System.String,System.String,System.IO.FileAccess,System.String,System.String)">
            <summary>
            Opens an existing virtual disk.
            </summary>
            <param name="path">The path of the virtual disk to open, can be a URI</param>
            <param name="forceType">Force the detected disk type (<c>null</c> to detect)</param>
            <param name="access">The desired access to the disk</param>
            <param name="user">The user name to use for authentication (if necessary)</param>
            <param name="password">The password to use for authentication (if necessary)</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format</returns>
            <remarks>
            The detected disk type can be forced by specifying a known disk type: 
            RAW, VHD, VMDK, etc.
            </remarks>
        </member>
        <member name="M:DiscUtils.VirtualDisk.OpenDisk(DiscUtils.DiscFileSystem,System.String,System.IO.FileAccess)">
            <summary>
            Opens an existing virtual disk, possibly from within an existing disk.
            </summary>
            <param name="fs">The file system to open the disk on</param>
            <param name="path">The path of the virtual disk to open</param>
            <param name="access">The desired access to the disk</param>
            <returns>The Virtual Disk, or <c>null</c> if an unknown disk format</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDisk.GetMasterBootRecord">
            <summary>
            Reads the first sector of the disk, known as the Master Boot Record.
            </summary>
            <returns>The MBR as a byte array</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.SetMasterBootRecord(System.Byte[])">
            <summary>
            Overwrites the first sector of the disk, known as the Master Boot Record.
            </summary>
            <param name="data">The master boot record, must be 512 bytes in length.</param>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDifferencingDisk(DiscUtils.DiscFileSystem,System.String)">
            <summary>
            Create a new differencing disk, possibly within an existing disk.
            </summary>
            <param name="fileSystem">The file system to create the disk on</param>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.CreateDifferencingDisk(System.String)">
            <summary>
            Create a new differencing disk.
            </summary>
            <param name="path">The path (or URI) for the disk to create</param>
            <returns>The newly created disk</returns>
        </member>
        <member name="M:DiscUtils.VirtualDisk.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskExtent">
            <summary>
            Base class represented a stored extent of a virtual disk.
            </summary>
            <remarks>
            Some file formats can divide a logical disk layer into multiple extents, stored in
            different files.  This class represents those extents.  Normally, all virtual disks
            have at least one extent.
            </remarks>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.IsSparse">
            <summary>
            Gets a value indicating whether the extent only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.Capacity">
            <summary>
            Gets the capacity of the extent (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskExtent.StoredSize">
            <summary>
            Gets the size of the extent (in bytes) on underlying storage.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.OpenContent(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Gets the content of this extent.
            </summary>
            <param name="parent">The parent stream (if any)</param>
            <param name="ownsParent">Controls ownership of the parent stream</param>
            <returns>The content as a stream</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskExtent.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskLayer">
            <summary>
            Represents the base layer, or a differencing layer of a VirtualDisk.
            </summary>
            <remarks>
            <para>VirtualDisks are composed of one or more layers - a base layer
            which represents the entire disk (even if not all bytes are actually stored),
            and a number of differencing layers that store the disk sectors that are
            logically different to the base layer.</para>
            <para>Disk Layers may not store all sectors.  Any sectors that are not stored
            are logically zero's (for base layers), or holes through to the layer underneath
            (all other layers).</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Finalize">
            <summary>
            Finalizes an instance of the VirtualDiskLayer class.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Geometry">
            <summary>
            Gets the geometry of the virtual disk layer.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Extents">
            <summary>
            Gets and sets the logical extents that make up this layer.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.IsSparse">
            <summary>
            Gets a value indicating whether the layer only stores meaningful sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.NeedsParent">
            <summary>
            Gets a value indicating whether this is a differential disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.FullPath">
            <summary>
            Gets the full path to this disk layer, or empty string.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.Capacity">
            <summary>
            Gets the capacity of the disk (in bytes).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskLayer.RelativeFileLocator">
            <summary>
            Gets a <c>FileLocator</c> that can resolve relative paths, or <c>null</c>.
            </summary>
            <remarks>
            Typically used to locate parent disks.
            </remarks>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.OpenContent(DiscUtils.SparseStream,DiscUtils.Ownership)">
            <summary>
            Gets the content of this layer.
            </summary>
            <param name="parent">The parent stream (if any)</param>
            <param name="ownsParent">Controls ownership of the parent stream</param>
            <returns>The content as a stream</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.GetParentLocations">
            <summary>
            Gets the possible locations of the parent file (if any).
            </summary>
            <returns>Array of strings, empty if no parent</returns>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Dispose">
            <summary>
            Disposes of this instance, freeing underlying resources.
            </summary>
        </member>
        <member name="M:DiscUtils.VirtualDiskLayer.Dispose(System.Boolean)">
            <summary>
            Disposes of underlying resources.
            </summary>
            <param name="disposing"><c>true</c> if running inside Dispose(), indicating
            graceful cleanup of all managed objects should be performed, or <c>false</c>
            if running inside destructor.</param>
        </member>
        <member name="T:DiscUtils.VirtualDiskParameters">
            <summary>
            Common parameters for virtual disks.
            </summary>
            <remarks>Not all attributes make sense for all kinds of disks, so some
            may be null.  Modifying instances of this class does not modify the
            disk itself.</remarks>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.DiskType">
            <summary>
            Gets or sets the type of disk (optical, hard disk, etc).
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.Capacity">
            <summary>
            Gets or sets the disk capacity.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.Geometry">
            <summary>
            Gets or sets the physical (aka IDE) geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.BiosGeometry">
            <summary>
            Gets or sets the logical (aka BIOS) geometry of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.AdapterType">
            <summary>
            Gets or sets the type of disk adapter.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskParameters.ExtendedParameters">
            <summary>
            Gets a dictionary of extended parameters, that varies by disk type.
            </summary>
        </member>
        <member name="T:DiscUtils.VirtualDiskClass">
            <summary>
            Enumeration of different classes of disk.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.None">
            <summary>
            Unknown (or unspecified) type.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.HardDisk">
            <summary>
            Hard disk.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.OpticalDisk">
            <summary>
            Optical disk, such as CD or DVD.
            </summary>
        </member>
        <member name="F:DiscUtils.VirtualDiskClass.FloppyDisk">
            <summary>
            Floppy disk.
            </summary>
        </member>
        <member name="T:DiscUtils.GeometryCalculation">
            <summary>
            Delegate for calculating a disk geometry from a capacity.
            </summary>
            <param name="capacity">The disk capacity to convert</param>
            <returns>The appropriate geometry for the disk</returns>
        </member>
        <member name="T:DiscUtils.VirtualDiskTypeInfo">
            <summary>
            Information about a type of virtual disk.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.Name">
            <summary>
            Gets or sets the name of the virtual disk type.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.Variant">
            <summary>
            Gets or sets the variant of the virtual disk type.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.CanBeHardDisk">
            <summary>
            Gets or sets a value indicating whether this disk type can represent hard disks.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.DeterministicGeometry">
            <summary>
            Gets or sets a value indicating whether this disk type requires a specific geometry for any given disk capacity.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.PreservesBiosGeometry">
            <summary>
            Gets or sets a value indicating whether this disk type persists the BIOS geometry.
            </summary>
        </member>
        <member name="P:DiscUtils.VirtualDiskTypeInfo.CalcGeometry">
            <summary>
            Gets or sets the algorithm for determining the geometry for a given disk capacity.
            </summary>
        </member>
        <member name="T:DiscUtils.MappedStream">
            <summary>
            Base class for streams that are essentially a mapping onto a parent stream.
            </summary>
            <remarks>
            This class provides access to the mapping underlying the stream, enabling
            callers to convert a byte range in this stream into one or more ranges in
            the parent stream.
            </remarks>
        </member>
        <member name="M:DiscUtils.MappedStream.FromStream(System.IO.Stream,DiscUtils.Ownership)">
            <summary>
            Converts any stream into a non-linear stream.
            </summary>
            <param name="stream">The stream to convert.</param>
            <param name="takeOwnership"><c>true</c> to have the new stream dispose the wrapped
            stream when it is disposed.</param>
            <returns>A sparse stream</returns>
            <remarks>The wrapped stream is assumed to be a linear stream (such that any byte range
            maps directly onto the parent stream)</remarks>
        </member>
        <member name="M:DiscUtils.MappedStream.FromStream(System.IO.Stream,DiscUtils.Ownership,System.Collections.Generic.IEnumerable{DiscUtils.StreamExtent})">
            <summary>
            Converts any stream into a non-linear stream.
            </summary>
            <param name="stream">The stream to convert.</param>
            <param name="takeOwnership"><c>true</c> to have the new stream dispose the wrapped
            stream when it is disposed.</param>
            <param name="extents">The set of extents actually stored in <c>stream</c></param>
            <returns>A sparse stream</returns>
            <remarks>The wrapped stream is assumed to be a linear stream (such that any byte range
            maps directly onto the parent stream)</remarks>
        </member>
        <member name="M:DiscUtils.MappedStream.MapContent(System.Int64,System.Int64)">
            <summary>
            Maps a logical range down to storage locations.
            </summary>
            <param name="start">The first logical range to map</param>
            <param name="length">The length of the range to map</param>
            <returns>One or more stream extents specifying the storage locations that correspond
            to the identified logical extent range.</returns>
            <remarks>
            <para>As far as possible, the stream extents are returned in logical disk order -
            however, due to the nature of non-linear streams, not all of the range may actually
            be stored, or some or all of the range may be compressed - thus reading the
            returned stream extents is not equivalent to reading the logical disk range.</para>
            </remarks>
        </member>
        <member name="T:DiscUtils.VolumeInfo">
            <summary>
            Base class that holds information about a disk volume.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.BiosType">
            <summary>
            Gets the one-byte BIOS type for this volume, which indicates the content.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.Length">
            <summary>
            Gets the size of the volume, in bytes.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.Identity">
            <summary>
            Gets the stable volume identity.
            </summary>
            <remarks>The stability of the identity depends the disk structure.
            In some cases the identity may include a simple index, when no other information
            is available.  Best practice is to add disks to the Volume Manager in a stable 
            order, if the stability of this identity is paramount.</remarks>
        </member>
        <member name="P:DiscUtils.VolumeInfo.PhysicalGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium, if any (may be null).
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.BiosGeometry">
            <summary>
            Gets the disk geometry of the underlying storage medium (as used in BIOS calls), may be null.
            </summary>
        </member>
        <member name="P:DiscUtils.VolumeInfo.PhysicalStartSector">
            <summary>
            Gets the offset of this volume in the underlying storage medium, if any (may be Zero).
            </summary>
        </member>
        <member name="M:DiscUtils.VolumeInfo.Open">
            <summary>
            Opens the volume, providing access to it's contents.
            </summary>
            <returns>Stream that can access the volume's contents.</returns>
        </member>
        <member name="T:DiscUtils.VolumeManager">
            <summary>
            VolumeManager interprets partitions and other on-disk structures (possibly combining multiple disks).
            </summary>
            <remarks>
            <para>Although file systems commonly are placed directly within partitions on a disk, in some
            cases a logical volume manager / logical disk manager may be used, to combine disk regions in multiple
            ways for data redundancy or other purposes.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor(DiscUtils.VirtualDisk)">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
            <param name="initialDisk">The initial disk to add.</param>
        </member>
        <member name="M:DiscUtils.VolumeManager.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the VolumeManager class.
            </summary>
            <param name="initialDiskContent">Content of the initial disk to add.</param>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes(System.IO.Stream)">
            <summary>
            Gets the physical volumes held on a disk.
            </summary>
            <param name="diskContent">The contents of the disk to inspect</param>
            <returns>An array of volumes</returns>
            <remarks>
            <para>By preference, use the form of this method that takes a disk parameter.</para>
            <para>If the disk isn't partitioned, this method returns the entire disk contents
            as a single volume.</para>
            </remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes(DiscUtils.VirtualDisk)">
            <summary>
            Gets the physical volumes held on a disk.
            </summary>
            <param name="disk">The disk to inspect</param>
            <returns>An array of volumes</returns>
            <remarks>If the disk isn't partitioned, this method returns the entire disk contents
            as a single volume.</remarks>
        </member>
        <member name="M:DiscUtils.VolumeManager.AddDisk(DiscUtils.VirtualDisk)">
            <summary>
            Adds a disk to the volume manager.
            </summary>
            <param name="disk">The disk to add</param>
            <returns>The GUID the volume manager will use to identify the disk</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.AddDisk(System.IO.Stream)">
            <summary>
            Adds a disk to the volume manager.
            </summary>
            <param name="content">The contents of the disk to add</param>
            <returns>The GUID the volume manager will use to identify the disk</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetPhysicalVolumes">
            <summary>
            Gets the physical volumes from all disks added to this volume manager.
            </summary>
            <returns>An array of physical volumes</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetLogicalVolumes">
            <summary>
            Gets the logical volumes from all disks added to this volume manager.
            </summary>
            <returns>An array of logical volumes</returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.GetVolume(System.String)">
            <summary>
            Gets a particular volume, based on it's identity.
            </summary>
            <param name="identity">The volume's identity</param>
            <returns>The volume information for the volume, or returns <c>null</c></returns>
        </member>
        <member name="M:DiscUtils.VolumeManager.Scan">
            <summary>
            Scans all of the disks for their physical and logical volumes.
            </summary>
        </member>
        <member name="T:DiscUtils.ZeroStream">
            <summary>
            A stream that returns Zero's.
            </summary>
        </member>
    </members>
</doc>
